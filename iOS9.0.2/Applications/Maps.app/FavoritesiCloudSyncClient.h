/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 5:12:29 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /Applications/Maps.app/Maps
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <Maps/Maps-Structs.h>
#import <Maps/MapsSyncedClient.h>
#import <libobjc.A.dylib/MSPContainerObserver.h>

@protocol MSPContainerCoalescingToken;
@class MSPFavoritesContainer, MapsSyncManager, NSMapTable, NSMutableArray, NSString, NSArray;

@interface FavoritesiCloudSyncClient : NSObject <MapsSyncedClient, MSPContainerObserver> {

	MSPFavoritesContainer* _container;
	id<MSPContainerCoalescingToken> _coalescingToken;
	MapsSyncManager* _syncManager;
	MSPOngoingFetchRequest* _fetchRequest;
	NSMapTable* _knownSyncItems;
	NSMutableArray* _syncedItems;
	char _started;
	char _startRequested;
	char _available;
	char _performingInitialFetch;

}

@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) NSString * syncIdentifier; 
@property (nonatomic,readonly) NSArray * syncedItems; 
@property (nonatomic,readonly) char syncSupportsKVO; 
@property (nonatomic,readonly) char syncInvertedOrdering; 
@property (nonatomic,readonly) char syncShouldUseItemPositions; 
@property (nonatomic,readonly) char syncShouldUseCustomStore; 
-(char)shouldAddSyncedItem:(id)arg1 atIndex:(unsigned)arg2 ;
-(void)insertSyncedItems:(id)arg1 atIndexes:(id)arg2 ;
-(void)removeSyncedItemsAtIndexes:(id)arg1 ;
-(void)updateSyncedItemAtIndexes:(id)arg1 ;
-(NSString *)syncIdentifier;
-(NSArray *)syncedItems;
-(char)syncSupportsKVO;
-(char)syncShouldUseCustomStore;
-(id)newSyncedItemForSyncData:(id)arg1 ;
-(void)_performInitialFetchInvokingSyncManager:(char)arg1 ;
-(id)initWithFavoritesContainer:(id)arg1 ;
-(void)_startIfPossibleAndNeeded;
-(id)_newOrUpdatedExistingItemForFavorite:(id)arg1 ;
-(void)_refetchEntirelyFromContainer;
-(void)dealloc;
-(id)init;
-(void)start;
-(void)container:(id)arg1 didEditByReplacingObjectsWithReplacements:(id)arg2 context:(id)arg3 ;
-(void)container:(id)arg1 didEditWithNewContents:(id)arg2 orderedEdits:(id)arg3 cause:(int)arg4 context:(id)arg5 ;
-(id)observationQueueForContainer:(id)arg1 ;
@end

