/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 5:11:58 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /Applications/Bridge.app/Bridge
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <Bridge/Bridge-Structs.h>
#import <UIKit/UIApplication.h>
#import <Bridge/PBBridgeConnectionDelegate.h>
#import <Bridge/PSSplitViewControllerNavigationDelegate.h>
#import <Bridge/SKUIApplicationDelegate.h>
#import <UIKit/UISplitViewControllerDelegate.h>
#import <Bridge/COSGetStartedViewControllerDelegate.h>
#import <Bridge/COSRadarReporterDelegate.h>
#import <UIKit/UIApplicationDelegate.h>
#import <libobjc.A.dylib/MCProfileConnectionObserver.h>

@class UIWindow, COSPreferencesRootController, PSSplitViewController, NPSDomainAccessor, COSSetupController, PBBridgeCompanionController, NRDevice, NSTimer, UIAlertView, UIViewController, COSGetStartedViewController, UINavigationController, CADisplayLink, UILabel, SKUIApplicationController, NSString;

@interface COSPreferencesAppController : UIApplication <PBBridgeConnectionDelegate, PSSplitViewControllerNavigationDelegate, SKUIApplicationDelegate, UISplitViewControllerDelegate, COSGetStartedViewControllerDelegate, COSRadarReporterDelegate, UIApplicationDelegate, MCProfileConnectionObserver> {

	char _isLocked;
	char _loadingExternalURL;
	int _networkStartCount;
	double _timeoutLimit;
	char _settingsWasResigned;
	unsigned _rootDomainConnect;
	unsigned _pmNotifier;
	IONotificationPortRef _systemPowerPortRef;
	CFRunLoopSourceRef _pmSource;
	char _syncTrapEnabled;
	char _syncTrapCompleted;
	char _isActivated;
	char _isResetting;
	char _isUpdatingGizmoInSetupFlow;
	char _isShowingRadarReporter;
	char _launchedByNanoRegistry;
	char _firstLaunch;
	char _backgrounded;
	UIWindow* _window;
	COSPreferencesRootController* _settingsController;
	PSSplitViewController* _settingsSplitViewController;
	NPSDomainAccessor* _perGizmoBridgeDomain;
	COSSetupController* _setupController;
	PBBridgeCompanionController* _bridgeController;
	NRDevice* _pairedGizmo;
	unsigned _backgroundTaskID;
	NSTimer* _taskCompletionTimeout;
	UIAlertView* _transportReachabilityAlert;
	UIViewController* _selectedController;
	COSGetStartedViewController* _getStartedViewController;
	UINavigationController* _radarReporterNav;
	CADisplayLink* _dl;
	UILabel* _debugLabel;
	/*^block*/id _setupFlowPresentationCompletion;
	SKUIApplicationController* _storeApplicationController;

}

@property (nonatomic,retain) UIWindow * window;                                                   //@synthesize window=_window - In the implementation block
@property (nonatomic,readonly) COSPreferencesRootController * settingsController;                 //@synthesize settingsController=_settingsController - In the implementation block
@property (nonatomic,readonly) PSSplitViewController * settingsSplitViewController;               //@synthesize settingsSplitViewController=_settingsSplitViewController - In the implementation block
@property (nonatomic,retain) NPSDomainAccessor * perGizmoBridgeDomain;                            //@synthesize perGizmoBridgeDomain=_perGizmoBridgeDomain - In the implementation block
@property (assign,nonatomic) char syncTrapEnabled;                                                //@synthesize syncTrapEnabled=_syncTrapEnabled - In the implementation block
@property (assign,nonatomic) char syncTrapCompleted;                                              //@synthesize syncTrapCompleted=_syncTrapCompleted - In the implementation block
@property (nonatomic,retain) COSSetupController * setupController;                                //@synthesize setupController=_setupController - In the implementation block
@property (nonatomic,retain) PBBridgeCompanionController * bridgeController;                      //@synthesize bridgeController=_bridgeController - In the implementation block
@property (nonatomic,retain) NRDevice * pairedGizmo;                                              //@synthesize pairedGizmo=_pairedGizmo - In the implementation block
@property (nonatomic,readonly) char isInSetupFlow; 
@property (assign,nonatomic) char isActivated;                                                    //@synthesize isActivated=_isActivated - In the implementation block
@property (assign,nonatomic) char isResetting;                                                    //@synthesize isResetting=_isResetting - In the implementation block
@property (assign,nonatomic) char isUpdatingGizmoInSetupFlow;                                     //@synthesize isUpdatingGizmoInSetupFlow=_isUpdatingGizmoInSetupFlow - In the implementation block
@property (assign,nonatomic) char isLocked;                                                       //@synthesize isLocked=_isLocked - In the implementation block
@property (assign,nonatomic) char isShowingRadarReporter;                                         //@synthesize isShowingRadarReporter=_isShowingRadarReporter - In the implementation block
@property (assign,nonatomic) unsigned backgroundTaskID;                                           //@synthesize backgroundTaskID=_backgroundTaskID - In the implementation block
@property (nonatomic,retain) NSTimer * taskCompletionTimeout;                                     //@synthesize taskCompletionTimeout=_taskCompletionTimeout - In the implementation block
@property (nonatomic,retain) UIAlertView * transportReachabilityAlert;                            //@synthesize transportReachabilityAlert=_transportReachabilityAlert - In the implementation block
@property (assign,nonatomic) UIViewController * selectedController;                               //@synthesize selectedController=_selectedController - In the implementation block
@property (nonatomic,retain) COSGetStartedViewController * getStartedViewController;              //@synthesize getStartedViewController=_getStartedViewController - In the implementation block
@property (nonatomic,retain) UINavigationController * radarReporterNav;                           //@synthesize radarReporterNav=_radarReporterNav - In the implementation block
@property (nonatomic,retain) CADisplayLink * dl;                                                  //@synthesize dl=_dl - In the implementation block
@property (nonatomic,retain) UILabel * debugLabel;                                                //@synthesize debugLabel=_debugLabel - In the implementation block
@property (assign,nonatomic) char launchedByNanoRegistry;                                         //@synthesize launchedByNanoRegistry=_launchedByNanoRegistry - In the implementation block
@property (assign,nonatomic) char firstLaunch;                                                    //@synthesize firstLaunch=_firstLaunch - In the implementation block
@property (assign,nonatomic) char backgrounded;                                                   //@synthesize backgrounded=_backgrounded - In the implementation block
@property (nonatomic,copy) id setupFlowPresentationCompletion;                                    //@synthesize setupFlowPresentationCompletion=_setupFlowPresentationCompletion - In the implementation block
@property (assign) unsigned rootDomainConnect;                                                    //@synthesize rootDomainConnect=_rootDomainConnect - In the implementation block
@property (nonatomic,retain) SKUIApplicationController * storeApplicationController;              //@synthesize storeApplicationController=_storeApplicationController - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(char)hasUpdateAvailable;
+(char)_shouldUseAlertControllerForLegacyAlerts;
-(void)resetSetupFlowAnimated:(char)arg1 forEvent:(unsigned)arg2 ;
-(void)dismissSetupFlowComplete:(char)arg1 animated:(char)arg2 ;
-(void)radarReporterDidFinish;
-(PBBridgeCompanionController *)bridgeController;
-(void)tappedStartInternal;
-(void)tappedStart;
-(void)tappedSubmitRadar;
-(char)isInSetupFlow;
-(void)presentSetupFlowAnimated:(char)arg1 ;
-(void)setPairedGizmo:(NRDevice *)arg1 ;
-(void)setSyncTrapEnabled:(char)arg1 ;
-(void)setSyncTrapCompleted:(char)arg1 ;
-(void)setIsActivated:(char)arg1 ;
-(char)isUpdatingGizmoInSetupFlow;
-(void)setIsUpdatingGizmoInSetupFlow:(char)arg1 ;
-(SKUIApplicationController *)storeApplicationController;
-(id)bridgeSettingsTabBarItem;
-(NPSDomainAccessor *)perGizmoBridgeDomain;
-(void)_networkingStartNotification:(id)arg1 ;
-(void)_networkingStopNotification:(id)arg1 ;
-(id)urlForActivity:(id)arg1 ;
-(void)_prepareAppearances;
-(void)_registerForPowerNotifications;
-(void)reloadAppearance:(id)arg1 ;
-(void)updateForRemoteActivity:(id)arg1 ;
-(void)devicePaired:(id)arg1 ;
-(void)deviceUnpaired:(id)arg1 ;
-(void)pairingFailed:(id)arg1 ;
-(void)enteredCompatibilityState:(id)arg1 ;
-(void)initialPairingFailed:(id)arg1 ;
-(void)resetSetupFlowInternalSettings;
-(void)messageSendFailed:(id)arg1 ;
-(void)loadSettingsController;
-(id)_tabBarItems;
-(id)oneTimeJumpURL;
-(void)processURL:(id)arg1 ;
-(void)_showSettingsUI;
-(void)_loadStoreApplicationWithLaunchOptions:(id)arg1 ;
-(void)_cancelBackgroundAssertionTimeout;
-(void)_extendBackgroundAssertion;
-(void)clearControllersForSuspendedState;
-(void)generateURL;
-(id)keyValueDictionaryForURL:(id)arg1 ;
-(void)popToRootOfSettingsSelectGeneral:(char)arg1 performWithoutDeferringTransitions:(char)arg2 ;
-(void)presentGetConnectedAlertIfNeeded;
-(void)retriggerNRAlertIfNeeded;
-(void)systemDidWake:(id)arg1 ;
-(void)checkIfNRRetriggerConditions;
-(void)_deregisterForPowerNotifications;
-(id)_rootControllerForSplitViewController:(id)arg1 ;
-(void)dismissSetupFlowAnimated:(char)arg1 ;
-(char)syncTrapEnabled;
-(void)resetPairedUI;
-(void)resetSetupFlowAnimated:(char)arg1 forEvent:(unsigned)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(void)setRadarReporterNav:(UINavigationController *)arg1 ;
-(void)setIsShowingRadarReporter:(char)arg1 ;
-(UINavigationController *)radarReporterNav;
-(void)clearBridgeSettingsTabBarItemBadge;
-(id)getLaunchedByValueForURL:(id)arg1 ;
-(id)currentSpecifierIDPath;
-(void)_setOffsetForController:(id)arg1 fromObjectPair:(id)arg2 ;
-(void)_performURLHandlingForRootListController:(id)arg1 controller:(id)arg2 dictionary:(id)arg3 items:(id)arg4 controllerNeedsPush:(char)arg5 ;
-(void)popToRootOfSettingsSelectGeneral:(char)arg1 ;
-(void)_clearControllersForSuspendedState:(id)arg1 ;
-(void)resetPerGizmoBridgeDomainIfNeeded;
-(void)badgeTabItemIfNeeded:(id)arg1 ;
-(void)expireTaskAssertion:(id)arg1 ;
-(void)connectionDidBecomeActive;
-(void)connectionDidBecomeInactive;
-(id)_appSuspendStateDescription;
-(void)disagreeToTerms;
-(id)_splitViewControllerForRootController:(id)arg1 ;
-(void)resetFlowForCameraExpiry;
-(void)presentUnpairingControllerAnimated:(char)arg1 ;
-(COSPreferencesRootController *)settingsController;
-(PSSplitViewController *)settingsSplitViewController;
-(void)setPerGizmoBridgeDomain:(NPSDomainAccessor *)arg1 ;
-(char)syncTrapCompleted;
-(void)setBridgeController:(PBBridgeCompanionController *)arg1 ;
-(char)isResetting;
-(void)setIsResetting:(char)arg1 ;
-(char)isShowingRadarReporter;
-(unsigned)backgroundTaskID;
-(void)setBackgroundTaskID:(unsigned)arg1 ;
-(NSTimer *)taskCompletionTimeout;
-(void)setTaskCompletionTimeout:(NSTimer *)arg1 ;
-(UIAlertView *)transportReachabilityAlert;
-(void)setTransportReachabilityAlert:(UIAlertView *)arg1 ;
-(UIViewController *)selectedController;
-(void)setSelectedController:(UIViewController *)arg1 ;
-(COSGetStartedViewController *)getStartedViewController;
-(void)setGetStartedViewController:(COSGetStartedViewController *)arg1 ;
-(CADisplayLink *)dl;
-(void)setDl:(CADisplayLink *)arg1 ;
-(char)launchedByNanoRegistry;
-(void)setLaunchedByNanoRegistry:(char)arg1 ;
-(char)firstLaunch;
-(void)setFirstLaunch:(char)arg1 ;
-(id)setupFlowPresentationCompletion;
-(void)setSetupFlowPresentationCompletion:(id)arg1 ;
-(void)setStoreApplicationController:(SKUIApplicationController *)arg1 ;
-(void)setDebugLabel:(UILabel *)arg1 ;
-(UILabel *)debugLabel;
-(char)isActivated;
-(void)dealloc;
-(UIWindow *)window;
-(id)init;
-(char)application:(id)arg1 openURL:(id)arg2 sourceApplication:(id)arg3 annotation:(id)arg4 ;
-(void)applicationWillTerminate:(id)arg1 ;
-(void)applicationDidBecomeActive:(id)arg1 ;
-(void)applicationWillResignActive:(id)arg1 ;
-(void)applicationDidEnterBackground:(id)arg1 ;
-(void)applicationWillEnterForeground:(id)arg1 ;
-(unsigned)application:(id)arg1 supportedInterfaceOrientationsForWindow:(id)arg2 ;
-(char)application:(id)arg1 willFinishLaunchingWithOptions:(id)arg2 ;
-(char)application:(id)arg1 didFinishLaunchingWithOptions:(id)arg2 ;
-(void)setWindow:(UIWindow *)arg1 ;
-(void)applicationWillSuspendForEventsOnly;
-(void)applicationDidResumeForEventsOnly;
-(void)application:(id)arg1 didUpdateUserActivity:(id)arg2 ;
-(char)application:(id)arg1 continueUserActivity:(id)arg2 restorationHandler:(/*^block*/id)arg3 ;
-(void)application:(id)arg1 didFailToContinueUserActivityWithType:(id)arg2 error:(id)arg3 ;
-(char)application:(id)arg1 willContinueUserActivityWithType:(id)arg2 ;
-(void)alertView:(id)arg1 clickedButtonAtIndex:(int)arg2 ;
-(char)isLocked;
-(id)navigationController;
-(void)setBackgrounded:(char)arg1 ;
-(char)splitViewController:(id)arg1 collapseSecondaryViewController:(id)arg2 ontoPrimaryViewController:(id)arg3 ;
-(id)splitViewController:(id)arg1 separateSecondaryViewControllerFromPrimaryViewController:(id)arg2 ;
-(void)setSetupController:(COSSetupController *)arg1 ;
-(char)backgrounded;
-(void)remoteDidBecomeAvailable;
-(void)remoteDidFailActivation:(id)arg1 ;
-(void)transportBecameReachable;
-(void)transportBecameUnreachable;
-(void)didHandlePerformanceResults;
-(void)remoteDidFailActivation:(id)arg1 userActionable:(char)arg2 ;
-(NRDevice *)pairedGizmo;
-(void)setIsLocked:(char)arg1 ;
-(unsigned)rootDomainConnect;
-(void)setRootDomainConnect:(unsigned)arg1 ;
-(COSSetupController *)setupController;
-(void)splitViewControllerDidPopToRootController:(id)arg1 ;
-(void)processURL:(id)arg1 animated:(char)arg2 fromSearch:(char)arg3 ;
-(void)application:(id)arg1 evaluateAppJavaScriptInContext:(id)arg2 JSContext:(id)arg3 ;
-(void)application:(id)arg1 didReselectTabBarItem:(id)arg2 ;
-(void)applicationDidChangeClientContext:(id)arg1 ;
-(void)tick:(id)arg1 ;
@end

