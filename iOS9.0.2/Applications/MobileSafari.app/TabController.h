/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 5:12:46 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /Applications/MobileSafari.app/MobileSafari
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <MobileSafari/CloudTabStoreDelegate.h>
#import <MobileSafari/RecentlyClosedTabViewControllerDelegate.h>
#import <MobileSafari/TabBarDelegate.h>
#import <MobileSafari/TabOverviewDelegate.h>
#import <MobileSafari/TabSnapshotCacheDelegate.h>
#import <MobileSafari/TiltedTabViewDelegate.h>

@class BrowserController, NSMutableArray, TabDocument, NSTimer, CloudTabStore, NSMutableSet, GestureRecognizingBarButtonItem, RecentlyClosedTabViewController, TabSnapshotCache, TabBar, TiltedTabView, UIButton, TabOverview, NSArray, NSString;

@interface TabController : NSObject <CloudTabStoreDelegate, RecentlyClosedTabViewControllerDelegate, TabBarDelegate, TabOverviewDelegate, TabSnapshotCacheDelegate, TiltedTabViewDelegate> {

	BrowserController* _browserController;
	NSMutableArray* _normalTabDocuments;
	NSMutableArray* _privateTabDocuments;
	TabDocument* _normalActiveTabDocument;
	TabDocument* _privateActiveTabDocument;
	NSTimer* _saveStateTimer;
	NSTimer* _stateValidateTimer;
	CloudTabStore* _cloudTabStore;
	char _cloudTabUpdatesEnabled;
	TabDocument* _tabDocumentBeingHiddenFromTabView;
	NSMutableSet* _tabDocumentsAboutToBeClosedInTiltedTabView;
	GestureRecognizingBarButtonItem* _tiltedTabViewAddTabButton;
	char _tiltedTabViewIsShowing;
	char _tabOverviewIsShowing;
	NSTimer* _updateContinuityTimer;
	char _canCloseLastTabViewTab;
	char _tabBarItemsFixed;
	char _tabViewItemsFixed;
	RecentlyClosedTabViewController* _recentlyClosedTabController;
	TabSnapshotCache* _snapshotCache;
	char _flushPendingSnapshots;
	/*^block*/id _flushPendingSnapshotsCompletion;
	char _tabExposeButtonIndicatorExcludesBlankDocuments;
	char _privateBrowsingEnabled;
	char _snapshotsAreEnabled;
	TabBar* _tabBar;
	TiltedTabView* _tiltedTabView;
	UIButton* _tiltedTabViewPrivateBrowsingButton;
	TabOverview* _tabOverview;

}

@property (nonatomic,copy,readonly) NSArray * tabDocuments;                                                //@synthesize normalTabDocuments=_normalTabDocuments - In the implementation block
@property (nonatomic,copy,readonly) NSArray * privateTabDocuments;                                         //@synthesize privateTabDocuments=_privateTabDocuments - In the implementation block
@property (nonatomic,copy,readonly) NSArray * currentTabDocuments; 
@property (nonatomic,copy,readonly) NSArray * allTabDocuments; 
@property (nonatomic,retain) TabDocument * activeTabDocument; 
@property (nonatomic,readonly) unsigned maximumTabDocumentCount; 
@property (nonatomic,readonly) TabDocument * tabDocumentBeingActivated; 
@property (assign,nonatomic) char tabViewDefersActivation; 
@property (nonatomic,readonly) char canCloseTab; 
@property (assign,getter=isPrivateBrowsingEnabled,nonatomic) char privateBrowsingEnabled;                  //@synthesize privateBrowsingEnabled=_privateBrowsingEnabled - In the implementation block
@property (nonatomic,readonly) CloudTabStore * cloudTabStore;                                              //@synthesize cloudTabStore=_cloudTabStore - In the implementation block
@property (nonatomic,retain,readonly) TabBar * tabBar;                                                     //@synthesize tabBar=_tabBar - In the implementation block
@property (assign,nonatomic) char usesTabBar; 
@property (nonatomic,readonly) RecentlyClosedTabViewController * recentlyClosedTabController; 
@property (assign,nonatomic) char tabExposeButtonIndicatorExcludesBlankDocuments;                          //@synthesize tabExposeButtonIndicatorExcludesBlankDocuments=_tabExposeButtonIndicatorExcludesBlankDocuments - In the implementation block
@property (nonatomic,retain,readonly) TiltedTabView * tiltedTabView;                                       //@synthesize tiltedTabView=_tiltedTabView - In the implementation block
@property (assign,nonatomic) char usesTiltedTabView; 
@property (nonatomic,readonly) NSArray * tiltedTabViewToolbarItems; 
@property (nonatomic,readonly) UIButton * tiltedTabViewPrivateBrowsingButton;                              //@synthesize tiltedTabViewPrivateBrowsingButton=_tiltedTabViewPrivateBrowsingButton - In the implementation block
@property (nonatomic,retain,readonly) TabOverview * tabOverview;                                           //@synthesize tabOverview=_tabOverview - In the implementation block
@property (assign,nonatomic) char usesTabOverview; 
@property (assign,nonatomic) char snapshotsAreEnabled;                                                     //@synthesize snapshotsAreEnabled=_snapshotsAreEnabled - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(TabDocument *)activeTabDocument;
-(void)saveStateInBackground:(char)arg1 ;
-(NSArray *)allTabDocuments;
-(void)dismissTabViewAnimated:(char)arg1 ;
-(id)initWithBrowserController:(id)arg1 ;
-(void)insertNewTabDocument:(id)arg1 openedFromTabDocument:(id)arg2 inBackground:(char)arg3 animated:(char)arg4 ;
-(void)closeAllOpenTabsAnimated:(char)arg1 exitTabView:(char)arg2 ;
-(TabOverview *)tabOverview;
-(TiltedTabView *)tiltedTabView;
-(NSArray *)tabDocuments;
-(void)setActiveTabDocument:(TabDocument *)arg1 ;
-(void)_addNewActiveTiltedTabViewTab;
-(void)tiltedTabView:(id)arg1 didSelectItem:(id)arg2 ;
-(void)tabOverview:(id)arg1 closeItem:(id)arg2 ;
-(void)tiltedTabView:(id)arg1 closeItem:(id)arg2 ;
-(void)closeTabDocument:(id)arg1 animated:(char)arg2 ;
-(void)clearBrowserController;
-(void)setTabExposeButtonIndicatorExcludesBlankDocuments:(char)arg1 ;
-(void)setSnapshotsAreEnabled:(char)arg1 ;
-(void)flushPendingSnapshotsWithCompletion:(/*^block*/id)arg1 ;
-(void)updateCloudTabsForEnteringBackground;
-(CloudTabStore *)cloudTabStore;
-(char)usesTabBar;
-(NSArray *)currentTabDocuments;
-(void)setUsesTiltedTabView:(char)arg1 ;
-(void)setUsesTabOverview:(char)arg1 ;
-(void)updateTiltedTabViewToolbarItems;
-(NSArray *)tiltedTabViewToolbarItems;
-(void)setUsesTabBar:(char)arg1 ;
-(void)updateTabBarAnimated:(char)arg1 ;
-(void)openInitialBlankTabDocumentIfNeeded;
-(char)readState;
-(void)updateTabExposeButtonIndicator;
-(char)canAddNewTab;
-(RecentlyClosedTabViewController *)recentlyClosedTabController;
-(void)setTabViewDefersActivation:(char)arg1 ;
-(void)replaceTabDocument:(id)arg1 withTabDocument:(id)arg2 ;
-(char)usesTabOverview;
-(TabDocument *)tabDocumentBeingActivated;
-(char)canCloseTab;
-(char)tabViewDefersActivation;
-(void)newTab;
-(void)closeTab;
-(void)setActiveTabDocument:(id)arg1 animated:(char)arg2 deferActivation:(char)arg3 ;
-(void)setActiveTabDocument:(id)arg1 animated:(char)arg2 ;
-(void)openBlankTabDocumentInTabBar;
-(void)insertNewBlankTabDocumentAnimated:(char)arg1 ;
-(void)setStateNeedsSaved;
-(void)saveStateInBackground:(char)arg1 needsValidate:(char)arg2 ;
-(id)tabDocumentForURL:(id)arg1 ;
-(void)_addTabLongPressRecognized:(id)arg1 ;
-(void)cloudTabStore:(id)arg1 cloudTabsEnabledDidChange:(char)arg2 ;
-(void)cloudTabStore:(id)arg1 didReceiveTabCloseRequest:(id)arg2 ;
-(void)saveTabDocumentContinuityActivitySoon:(id)arg1 ;
-(unsigned)maximumTabDocumentCount;
-(void)recentlyClosedTabViewController:(id)arg1 didSelectTabDocument:(id)arg2 ;
-(void)updateCloudTabs;
-(id)blankSnapshotForTiltedTabView:(id)arg1 topBackdropHeight:(float)arg2 ;
-(char)tiltedTabView:(id)arg1 canCloseItem:(id)arg2 ;
-(void)tiltedTabView:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3 ;
-(void)tiltedTabView:(id)arg1 relinquishContentView:(id)arg2 forItem:(id)arg3 ;
-(char)tiltedTabView:(id)arg1 itemHasValidSnapshot:(id)arg2 ;
-(void)tiltedTabViewDidPresent:(id)arg1 ;
-(void)tiltedTabViewDidDismiss:(id)arg1 ;
-(id)currentItemForTiltedTabView:(id)arg1 ;
-(void)tiltedTabViewWillPresent:(id)arg1 ;
-(void)tiltedTabViewWillDismiss:(id)arg1 ;
-(id)tiltedTabView:(id)arg1 borrowContentViewForItem:(id)arg2 withTopBackdropView:(id*)arg3 ofHeight:(float)arg4 ;
-(float)tiltedTabView:(id)arg1 headerHeightForItem:(id)arg2 ;
-(void)tiltedTabView:(id)arg1 animateTopBackdropView:(id)arg2 hidden:(char)arg3 ;
-(void)tiltedTabViewDidUpdateItemVisibilityOrder:(id)arg1 ;
-(void)tiltedTabView:(id)arg1 didSelectNavigationDestination:(id)arg2 ;
-(void)tiltedTabView:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3 ;
-(void)tabBar:(id)arg1 closeItem:(id)arg2 ;
-(char)tabBar:(id)arg1 canCloseItem:(id)arg2 ;
-(void)tabBar:(id)arg1 activateItem:(id)arg2 ;
-(char)tabBar:(id)arg1 canMoveItem:(id)arg2 ;
-(void)tabBar:(id)arg1 moveItem:(id)arg2 overItem:(id)arg3 ;
-(void)_auditTabCount;
-(void)_updateAddTabButtonEnabled;
-(void)logTabActivationInterval:(double)arg1 forActivationType:(int)arg2 ;
-(char)usesTiltedTabView;
-(id)_tabDocumentRepresentedByTiltedTabItem:(id)arg1 ;
-(id)_tabDocumentRepresentedByTabOverviewItem:(id)arg1 ;
-(char)tabOverview:(id)arg1 canCloseItem:(id)arg2 ;
-(void)_switchActiveTabDocumentFromTabDocument:(id)arg1 toTabDocument:(id)arg2 ;
-(id)_currentTabs;
-(id)_oldestInactiveTabDocument;
-(void)_closeTabDocument:(id)arg1 animated:(char)arg2 allowAddingToRecentlyClosedTabs:(char)arg3 ;
-(void)_makeRoomForNewTabDocument:(id)arg1 ;
-(void)_tabCountDidChange;
-(void)_updateTiltedTabViewItems;
-(void)_updateTabOverviewItems;
-(void)_updateTabBarAnimated:(char)arg1 keepingDocumentVisible:(id)arg2 ;
-(void)_insertTabDocument:(id)arg1 afterTabDocument:(id)arg2 inBackground:(char)arg3 animated:(char)arg4 ;
-(id)_insertNewBlankTabDocumentInBackground:(char)arg1 animated:(char)arg2 ;
-(void)tabOverviewAddTab:(id)arg1 ;
-(id)_openBlankTabDocument;
-(void)_setTabBarItemsFixed:(char)arg1 ;
-(char)_shouldFocusPreviousDocumentWhenClosingDocument:(id)arg1 ;
-(void)_logActivationForTab:(id)arg1 ;
-(void)_updateTiltedTabViewItemsAnimated:(char)arg1 ;
-(void)_updateTiltedTabViewItemsWithTransition:(int)arg1 ;
-(void)_suppressSingleEmptyTabIfAppropriate;
-(void)_updateExplanationViewVisibilityAnimated:(char)arg1 ;
-(void)_updateSnapshotCacheState;
-(id)_tabDocumentRepresentedByTabBarItem:(id)arg1 ;
-(void)moveTabDocument:(id)arg1 overTabDocument:(id)arg2 ;
-(char)_createAndSwitchToNewBlankTabDocumentOpeningCaptiveLandingPageIfNecessary;
-(char)_shouldShowExplanationView;
-(void)_cloudTabsDidUpdate:(id)arg1 ;
-(void)_setCloudTabUpdatesEnabled:(char)arg1 ;
-(void)_updateCloudTabUpdatesEnabled;
-(void)_updateSnapshotIdentifiers;
-(void)_updateTiltedTabViewCloudTabs;
-(void)_updateTabOverviewCloudTabs;
-(void)_dismissTiltedTabView;
-(void)_updateTiltedTabViewPrivateBrowsingButtonVisibility;
-(void)_updateTabSnapshotsAnimated:(char)arg1 ;
-(void)_updateSnapshotCacheStateForPresented:(char)arg1 ;
-(void)_addNewActiveTiltedTabViewTabWithNavigationDestination:(id)arg1 ;
-(id)_tabDocumentForURL:(id)arg1 withUUID:(id)arg2 ;
-(void)_updateContinuityTimerFired;
-(void)_cancelPendingUpdateContinuityActivityTimer;
-(void)tabOverviewWillPresent:(id)arg1 ;
-(void)tabOverviewDidDismiss:(id)arg1 ;
-(void)tabOverviewDidBeginDismissal:(id)arg1 ;
-(void)tabOverviewDidCancelDismissal:(id)arg1 ;
-(id)currentItemForTabOverview:(id)arg1 ;
-(void)tabOverview:(id)arg1 didSelectItem:(id)arg2 ;
-(void)tabOverview:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3 ;
-(void)tabOverviewDidUpdateItemVisibilityOrder:(id)arg1 ;
-(float)tabOverview:(id)arg1 headerHeightForItem:(id)arg2 ;
-(id)tabOverview:(id)arg1 borrowContentViewForItem:(id)arg2 topBackdropHeight:(float)arg3 ;
-(void)tabOverview:(id)arg1 relinquishContentView:(id)arg2 forItem:(id)arg3 ;
-(id)blankSnapshotForTabOverview:(id)arg1 topBackdropHeight:(float)arg2 ;
-(char)tabOverview:(id)arg1 item:(id)arg2 matchesSearchText:(id)arg3 ;
-(void)tabOverview:(id)arg1 didSelectNavigationDestination:(id)arg2 ;
-(void)tabOverview:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3 ;
-(void)tabOverviewDidPressDoneButton:(id)arg1 ;
-(void)tabSnapshotCache:(id)arg1 didCacheSnapshotWithIdentifier:(id)arg2 ;
-(void)tabSnapshotCache:(id)arg1 didEvictSnapshotWithIdentifier:(id)arg2 ;
-(void)tabSnapshotCache:(id)arg1 requestSnapshotWithIdentifier:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)tabSnapshotCacheDidFinishUpdating:(id)arg1 ;
-(char)tabSnapshotCache:(id)arg1 shouldRequestSavedSnapshotWithIdentifier:(id)arg2 ;
-(void)tabBarAddTab:(id)arg1 ;
-(void)_handlePendingCloseTabRequests;
-(void)tabDocumentDidUpdateUUID:(id)arg1 ;
-(void)invalidateSnapshotForTabDocument:(id)arg1 ;
-(id)cachedContentImageForTabDocument:(id)arg1 ;
-(NSArray *)privateTabDocuments;
-(char)tabExposeButtonIndicatorExcludesBlankDocuments;
-(char)isPrivateBrowsingEnabled;
-(UIButton *)tiltedTabViewPrivateBrowsingButton;
-(char)snapshotsAreEnabled;
-(void)_saveStateFromTimer:(id)arg1 ;
-(void)_setSaveStateTimer:(id)arg1 ;
-(void)_clearStateValidateTimer;
-(id)_persistentStateDictionaryForTabs:(id)arg1 ;
-(void)_validateSavedState:(id)arg1 ;
-(void)_restorePersistentDocumentState:(id)arg1 into:(id)arg2 withCurrentActiveDocument:(id)arg3 activeDocumentIsValid:(char)arg4 restoredActiveDocumentIndex:(unsigned)arg5 ;
-(void)dealloc;
-(TabBar *)tabBar;
-(void)popoverControllerDidDismissPopover:(id)arg1 ;
-(void)setPrivateBrowsingEnabled:(char)arg1 ;
@end

