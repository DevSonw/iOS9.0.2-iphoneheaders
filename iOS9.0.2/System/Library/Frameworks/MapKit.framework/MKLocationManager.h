/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:30:43 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/Frameworks/MapKit.framework/MapKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <libobjc.A.dylib/GEOResourceManifestTileGroupObserver.h>
#import <libobjc.A.dylib/MKLocationProviderDelegate.h>

@protocol MKLocationProvider, MKLocationRecorder;
@class NSHashTable, CLLocation, NSMutableArray, NSTimer, GEOLocationShifter, CLHeading, NSLock, NSError, GEOLocation, NSBundle, NSString;

@interface MKLocationManager : NSObject <GEOResourceManifestTileGroupObserver, MKLocationProviderDelegate> {

	id<MKLocationProvider> _locationProvider;
	NSHashTable* _locationObservers;
	NSHashTable* _locationListeners;
	NSHashTable* _headingObservers;
	CLLocation* _lastLocation;
	CLLocation* _lastGoodLocation;
	double _lastLocationUpdateTime;
	char _isLastLocationStale;
	char _lastLocationPushed;
	char _trackingLocation;
	char _trackingHeading;
	id<MKLocationRecorder> _locationRecorder;
	double _applicationResumeTime;
	double _applicationSuspendTime;
	double _locationAccuracyUpdateTime;
	double _locationUpdateStartTime;
	char _isReceivingAccurateLocations;
	NSMutableArray* _waitForAccurateLocationsHandlers;
	NSTimer* _waitForAccurateLocationsTimer;
	char _allowUpdateCoalescing;
	NSTimer* _coalesceTimer;
	double _lastLocationReportTime;
	GEOLocationShifter* _locationShifter;
	CLHeading* _heading;
	/*^block*/id _networkActivity;
	char _enabled;
	char _useCourseForHeading;
	char _logStartStopLocationUpdates;
	double _lastVehicleHeading;
	double _lastVehicleSpeed;
	double _lastVehicleHeadingUpdateTime;
	double _lastVehicleSpeedUpdateTime;
	int _consecutiveOutOfCourseCount;
	double _navCourse;
	/*^block*/id _locationCorrector;
	double _minimumLocationUpdateInterval;
	char _allowOldLocations;
	char _continuedAfterBecomingInactive;
	char _suspended;
	NSMutableArray* _recentLocationUpdateIntervals;
	NSLock* _lastLocationLock;
	NSLock* _observersLock;
	char _hasCustomDesiredAccuracy;
	char _continuesWhileInactive;
	NSError* _locationError;

}

@property (nonatomic,retain) id<MKLocationProvider> locationProvider; 
@property (nonatomic,copy) id locationCorrector;                                                                                           //@synthesize locationCorrector=_locationCorrector - In the implementation block
@property (assign,nonatomic) char logStartStopLocationUpdates;                                                                             //@synthesize logStartStopLocationUpdates=_logStartStopLocationUpdates - In the implementation block
@property (assign,getter=isEnabled,nonatomic) char enabled;                                                                                //@synthesize enabled=_enabled - In the implementation block
@property (getter=isLocationServicesAuthorizationNeeded,nonatomic,readonly) char locationServicesAuthorizationNeeded; 
@property (nonatomic,readonly) char isLocationServicesAvailable; 
@property (nonatomic,readonly) char isLocationServicesPossiblyAvailable; 
@property (nonatomic,readonly) char isLocationServicesEnabled; 
@property (nonatomic,readonly) char isLocationServicesApproved; 
@property (nonatomic,readonly) char isLocationServicesDenied; 
@property (nonatomic,readonly) char isLocationServicesRestricted; 
@property (nonatomic,readonly) char isHeadingServicesAvailable; 
@property (assign,getter=isLocationServicesPreferencesDialogEnabled,nonatomic) char locationServicesPreferencesDialogEnabled; 
@property (nonatomic,readonly) GEOLocation * currentLocation; 
@property (nonatomic,readonly) GEOLocation * gridSnappedCurrentLocation; 
@property (nonatomic,readonly) GEOLocation * courseCorrectedLocation; 
@property (assign,nonatomic) int headingOrientation; 
@property (nonatomic,copy) id authorizationRequestBlock; 
@property (nonatomic,readonly) char locationShiftEnabled; 
@property (nonatomic,readonly) char hasLocation; 
@property (nonatomic,readonly) CLLocation * lastLocation; 
@property (nonatomic,readonly) CLLocation * lastGoodLocation;                                                                              //@synthesize lastGoodLocation=_lastGoodLocation - In the implementation block
@property (nonatomic,readonly) char isLastLocationStale;                                                                                   //@synthesize isLastLocationStale=_isLastLocationStale - In the implementation block
@property (nonatomic,readonly) NSError * locationError;                                                                                    //@synthesize locationError=_locationError - In the implementation block
@property (assign,nonatomic) double desiredAccuracy; 
@property (assign,nonatomic) double distanceFilter; 
@property (assign,nonatomic) char matchInfoEnabled; 
@property (assign,nonatomic) char allowOldLocations;                                                                                       //@synthesize allowOldLocations=_allowOldLocations - In the implementation block
@property (assign,nonatomic) int activityType; 
@property (nonatomic,readonly) double expectedGpsUpdateInterval; 
@property (nonatomic,readonly) double timeScale; 
@property (nonatomic,retain) NSBundle * effectiveBundle; 
@property (nonatomic,copy) NSString * effectiveBundleIdentifier; 
@property (assign,nonatomic) char allowUpdateCoalescing;                                                                                   //@synthesize allowUpdateCoalescing=_allowUpdateCoalescing - In the implementation block
@property (assign,nonatomic) char useCourseForHeading;                                                                                     //@synthesize useCourseForHeading=_useCourseForHeading - In the implementation block
@property (nonatomic,readonly) CLHeading * heading;                                                                                        //@synthesize heading=_heading - In the implementation block
@property (nonatomic,readonly) double currentVehicleHeading; 
@property (nonatomic,readonly) double currentVehicleSpeed; 
@property (nonatomic,readonly) double vehicleHeadingOrCourse; 
@property (nonatomic,copy) id networkActivity;                                                                                             //@synthesize networkActivity=_networkActivity - In the implementation block
@property (nonatomic,retain) id<MKLocationRecorder> locationRecorder;                                                                      //@synthesize locationRecorder=_locationRecorder - In the implementation block
@property (nonatomic,readonly) double navigationCourse;                                                                                    //@synthesize navCourse=_navCourse - In the implementation block
@property (assign,nonatomic) double minimumLocationUpdateInterval;                                                                         //@synthesize minimumLocationUpdateInterval=_minimumLocationUpdateInterval - In the implementation block
@property (assign,nonatomic) char continuesWhileInactive;                                                                                  //@synthesize continuesWhileInactive=_continuesWhileInactive - In the implementation block
@property (getter=wasLastLocationPushed,nonatomic,readonly) char lastLocationPushed;                                                       //@synthesize lastLocationPushed=_lastLocationPushed - In the implementation block
@property (nonatomic,readonly) int lastLocationSource; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)timeoutError;
+(void)setCanMonitorWiFiStatus:(char)arg1 ;
+(id)sharedLocationManager;
-(void)setLocationServicesPreferencesDialogEnabled:(char)arg1 ;
-(double)timeScale;
-(void)requestWhenInUseAuthorizationWithPrompt;
-(void)dismissHeadingCalibrationDisplay;
-(char)matchInfoEnabled;
-(void)setActivityType:(int)arg1 ;
-(void)setAuthorizationRequestBlock:(id)arg1 ;
-(int)headingOrientation;
-(double)desiredAccuracy;
-(NSString *)effectiveBundleIdentifier;
-(void)setMatchInfoEnabled:(char)arg1 ;
-(char)isLocationServicesPreferencesDialogEnabled;
-(double)distanceFilter;
-(id)authorizationRequestBlock;
-(void)setEffectiveBundle:(NSBundle *)arg1 ;
-(double)expectedGpsUpdateInterval;
-(void)setEffectiveBundleIdentifier:(NSString *)arg1 ;
-(char)logStartStopLocationUpdates;
-(void)setLocationRecorder:(id<MKLocationRecorder>)arg1 ;
-(char)allowUpdateCoalescing;
-(id)singleLocationUpdateWithDesiredAccuracy:(double)arg1 handler:(/*^block*/id)arg2 timeout:(double)arg3 maxLocationAge:(double)arg4 ;
-(void)locationProvider:(id)arg1 didUpdateHeading:(id)arg2 ;
-(void)reportCoalescedUpdated;
-(void)setAllowOldLocations:(char)arg1 ;
-(void)_startCoalescingUpdates:(int)arg1 ;
-(char)isHeadingServicesAvailable;
-(id)singleLocationUpdateWithDesiredAccuracy:(double)arg1 handler:(/*^block*/id)arg2 timeout:(double)arg3 ;
-(void)setLocationProvider:(id<MKLocationProvider>)arg1 ;
-(id<MKLocationProvider>)locationProvider;
-(id)singleLocationUpdateWithDesiredAccuracy:(double)arg1 handler:(/*^block*/id)arg2 ;
-(void)_setTrackingLocation:(char)arg1 ;
-(char)allowOldLocations;
-(void)_startLocationUpdateWithObserver:(id)arg1 desiredAccuracy:(double)arg2 ;
-(char)wasLastLocationPushed;
-(char)shouldStartCoalescingLocation:(id)arg1 ;
-(id)locationCorrector;
-(void)locationProviderDidChangeAuthorizationStatus:(id)arg1 ;
-(void)_reportHeadingFailureWithError:(id)arg1 ;
-(id)singleLocationUpdateWithHandler:(/*^block*/id)arg1 ;
-(void)_stopCoalescingUpdates;
-(char)isLocationServicesAuthorizationNeeded;
-(char)isLocationServicesApproved;
-(char)shouldCoalesceUpdates;
-(void)waitForAccurateLocationWithHandler:(/*^block*/id)arg1 ;
-(double)navigationCourse;
-(void)locationProvider:(id)arg1 didUpdateLocation:(id)arg2 ;
-(id<MKLocationRecorder>)locationRecorder;
-(void)setUseCourseForHeading:(char)arg1 ;
-(void)_reportLocationFailureWithError:(id)arg1 ;
-(void)startLocationUpdateWithObserver:(id)arg1 ;
-(char)continuesWhileInactive;
-(char)useCourseForHeading;
-(void)setContinuesWhileInactive:(char)arg1 ;
-(void)dampenGPSLocationAccuracy:(id*)arg1 oldLocationSource:(int)arg2 ;
-(void)stopLocationUpdateWithObserver:(id)arg1 ;
-(void)setLocationCorrector:(id)arg1 ;
-(void)_reportLocationStatus:(SEL)arg1 ;
-(double)currentVehicleSpeed;
-(char)_isTimeToResetOnResume;
-(void)listenForLocationUpdates:(id)arg1 ;
-(double)vehicleHeadingOrCourse;
-(char)shouldStopCoalescingLocation:(id)arg1 ;
-(char)isLocationServicesAvailable;
-(void)setNetworkActivity:(id)arg1 ;
-(void)locationProvider:(id)arg1 didUpdateLocation:(id)arg2 lastKnownNavCourse:(double)arg3 ;
-(int)lastLocationSource;
-(char)isLocationServicesDenied;
-(void)_reportLocationSuccess;
-(NSError *)locationError;
-(void)locationProvider:(id)arg1 didUpdateVehicleHeading:(double)arg2 timestamp:(id)arg3 ;
-(id)networkActivity;
-(void)setCoalesceTimer:(id)arg1 ;
-(void)_useCoreLocationProvider;
-(GEOLocation *)gridSnappedCurrentLocation;
-(void)_reportLocationReset;
-(char)_shouldAllowLocationUpdateInterval:(double)arg1 ;
-(GEOLocation *)courseCorrectedLocation;
-(double)currentVehicleHeading;
-(void)pushLocation:(id)arg1 ;
-(void)stopVehicleHeadingUpdate;
-(void)_setTrackingHeading:(char)arg1 ;
-(void)_setIsReceivingAccurateLocations:(char)arg1 ;
-(char)isLocationServicesPossiblyAvailable:(id*)arg1 ;
-(void)_waitForAccurateLocationsTimerFired:(id)arg1 ;
-(void)stopVehicleSpeedUpdate;
-(void)locationProviderDidResumeLocationUpdates:(id)arg1 ;
-(void)locationProvider:(id)arg1 didReceiveError:(id)arg2 ;
-(void)startVehicleHeadingUpdate;
-(char)isLocationServicesPossiblyAvailable;
-(CLLocation *)lastGoodLocation;
-(void)_reportHeadingSuccess;
-(char)isLastLocationStale;
-(void)_syncLocationProviderWithTracking;
-(void)locationProviderDidPauseLocationUpdates:(id)arg1 ;
-(void)startVehicleSpeedUpdate;
-(void)setAllowUpdateCoalescing:(char)arg1 ;
-(char)locationProviderShouldPauseLocationUpdates:(id)arg1 ;
-(void)startHeadingUpdateWithObserver:(id)arg1 ;
-(void)setMinimumLocationUpdateInterval:(double)arg1 ;
-(char)isLocationServicesRestricted;
-(void)stopHeadingUpdateWithObserver:(id)arg1 ;
-(double)minimumLocationUpdateInterval;
-(void)_locationProvider:(id)arg1 didUpdateLocation:(id)arg2 lastKnownNavCourse:(double)arg3 ;
-(void)_suspend;
-(void)locationProvider:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3 ;
-(void)resetAfterResumeIfNecessary;
-(void)setLogStartStopLocationUpdates:(char)arg1 ;
-(char)isLocationServicesEnabled;
-(void)requestWhenInUseAuthorization;
-(void)setDesiredAccuracy:(double)arg1 ;
-(void)setLastLocation:(CLLocation *)arg1 ;
-(CLLocation *)lastLocation;
-(void)dealloc;
-(id)init;
-(void)applicationDidBecomeActive:(id)arg1 ;
-(void)applicationWillResignActive:(id)arg1 ;
-(int)activityType;
-(void)reset;
-(void)setEnabled:(char)arg1 ;
-(char)isEnabled;
-(NSBundle *)effectiveBundle;
-(void)resourceManifestManager:(id)arg1 didChangeActiveTileGroup:(id)arg2 fromOldTileGroup:(id)arg3 ;
-(char)hasLocation;
-(void)setHeading:(CLHeading *)arg1 ;
-(CLHeading *)heading;
-(char)locationShiftEnabled;
-(GEOLocation *)currentLocation;
-(void)setDistanceFilter:(double)arg1 ;
-(void)setHeadingOrientation:(int)arg1 ;
@end

