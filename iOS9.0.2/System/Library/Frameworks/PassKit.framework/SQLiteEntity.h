/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:37:06 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/Frameworks/PassKit.framework/passd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <passd/SQLiteEntity.h>

@protocol SQLiteEntity <NSObject>
@required
+(void)applyPropertySetters:(id)arg1 toObject:(id)arg2 withProperties:(id)arg3 values:(id*)arg4;
+(id)databaseTable;
+(id)associationPropertyForEntityClass:(Class)arg1;
+(id)disambiguatedSQLForProperty:(id)arg1;
+(id)foreignDatabaseColumnForProperty:(id)arg1;
+(id)foreignDatabaseTableForProperty:(id)arg1;
+(id)foreignKeyColumnForTable:(id)arg1;
+(id)databaseValueForProperty:(id)arg1 clientValue:(id)arg2;
+(id)foreignDatabaseTablesToDelete;
+(id)copyDatabaseDictionaryToSetClientDictionary:(id)arg1;
+(id)databasePropertyToGetClientProperty:(id)arg1;
+(id)databasePropertyToSetClientProperty:(id)arg1;
+(id)joinClauseForProperty:(id)arg1;
-(void)getValuesForProperties:(id)arg1 withApplier:(/*^block*/id)arg2;
-(void)getValues:(id*)arg1 forProperties:(id*)arg2 count:(unsigned)arg3;
-(id)valueForProperty:(id)arg1;
-(void)setExternalValuesWithDictionary:(id)arg1;
-(id)valueForExternalProperty:(id)arg1;
-(char)setValue:(id)arg1 forProperty:(id)arg2;
-(char)setValuesWithDictionary:(id)arg1;
-(char)deleteFromDatabase;

@end


@class SQLiteDatabase, NSString;

@interface SQLiteEntity : NSObject <SQLiteEntity> {

	SQLiteDatabase* _database;
	long long _persistentID;

}

@property (nonatomic,readonly) SQLiteDatabase * database;              //@synthesize database=_database - In the implementation block
@property (nonatomic,readonly) long long persistentID;                 //@synthesize persistentID=_persistentID - In the implementation block
@property (nonatomic,readonly) char existsInDatabase; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)applyPropertySetters:(id)arg1 toObject:(id)arg2 withProperties:(id)arg3 values:(id*)arg4 ;
+(id)queryWithDatabase:(id)arg1 predicate:(id)arg2 orderingProperties:(id)arg3 orderingDirections:(id)arg4 limit:(int)arg5 ;
+(int)countInDatabase:(id)arg1 predicate:(id)arg2 ;
+(id)databaseTable;
+(id)associationPropertyForEntityClass:(Class)arg1 ;
+(id)disambiguatedSQLForProperty:(id)arg1 ;
+(id)foreignDatabaseColumnForProperty:(id)arg1 ;
+(id)foreignDatabaseTableForProperty:(id)arg1 ;
+(id)foreignKeyColumnForTable:(id)arg1 ;
+(id)databaseValueForProperty:(id)arg1 clientValue:(id)arg2 ;
+(id)foreignDatabaseTablesToDelete;
+(id)copyDatabaseDictionaryToSetClientDictionary:(id)arg1 ;
+(id)databasePropertyToGetClientProperty:(id)arg1 ;
+(id)databasePropertyToSetClientProperty:(id)arg1 ;
+(id)queryWithDatabase:(id)arg1 predicate:(id)arg2 orderingProperties:(id)arg3 orderingDirections:(id)arg4 ;
+(id)queryWithDatabase:(id)arg1 predicate:(id)arg2 orderingProperties:(id)arg3 ;
+(id)queryWithDatabase:(id)arg1 predicate:(id)arg2 ;
+(id)anyInDatabase:(id)arg1 predicate:(id)arg2 ;
+(id)maxValueForProperty:(id)arg1 predicate:(id)arg2 database:(id)arg3 ;
+(char)_insertValues:(id)arg1 intoTable:(id)arg2 withPersistentID:(long long)arg3 database:(id)arg4 ;
+(id)joinClauseForProperty:(id)arg1 ;
+(id)_aggregateValueForProperty:(id)arg1 function:(id)arg2 predicate:(id)arg3 database:(id)arg4 ;
+(id)minValueForProperty:(id)arg1 predicate:(id)arg2 database:(id)arg3 ;
-(id)duplicateEntityAssigningNewPersistentID:(long long)arg1 ;
-(void)getValuesForProperties:(id)arg1 withApplier:(/*^block*/id)arg2 ;
-(id)duplicateEntity;
-(void)getValues:(id*)arg1 forProperties:(id*)arg2 count:(unsigned)arg3 ;
-(long long)persistentID;
-(id)valueForProperty:(id)arg1 ;
-(void)setExternalValuesWithDictionary:(id)arg1 ;
-(id)_copyTableClusteredValuesWithValues:(id)arg1 ;
-(SQLiteDatabase *)database;
-(id)valueForExternalProperty:(id)arg1 ;
-(char)setValue:(id)arg1 forProperty:(id)arg2 ;
-(id)initWithPropertyValues:(id)arg1 inDatabase:(id)arg2 ;
-(id)initWithPersistentID:(long long)arg1 inDatabase:(id)arg2 ;
-(char)setValuesWithDictionary:(id)arg1 ;
-(char)deleteFromDatabase;
-(char)_deleteRowFromTable:(id)arg1 usingColumn:(id)arg2 ;
-(char)existsInDatabase;
@end

