/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:30:14 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/Frameworks/CFNetwork.framework/CFNetwork
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <CFNetwork/CFNetwork-Structs.h>
#import <libobjc.A.dylib/NSSecureCoding.h>
#import <libobjc.A.dylib/NSCopying.h>

@class NSString, NSDictionary, NSHTTPCookieStorage, NSURLCredentialStorage, NSURLCache, NSArray, NSURL, NSData, NSSet;

@interface NSURLSessionConfiguration : NSObject <NSSecureCoding, NSCopying>

@property (copy) NSString * identifier; 
@property (assign) unsigned requestCachePolicy; 
@property (assign) double timeoutIntervalForRequest; 
@property (assign) double timeoutIntervalForResource; 
@property (assign) unsigned networkServiceType; 
@property (assign) char allowsCellularAccess; 
@property (getter=isDiscretionary) char discretionary; 
@property (copy) NSString * sharedContainerIdentifier; 
@property (assign) char sessionSendsLaunchEvents; 
@property (copy) NSDictionary * connectionProxyDictionary; 
@property (assign) int TLSMinimumSupportedProtocol; 
@property (assign) int TLSMaximumSupportedProtocol; 
@property (assign) char HTTPShouldUsePipelining; 
@property (assign) char HTTPShouldSetCookies; 
@property (assign) unsigned HTTPCookieAcceptPolicy; 
@property (copy) NSDictionary * HTTPAdditionalHeaders; 
@property (assign) int HTTPMaximumConnectionsPerHost; 
@property (retain) NSHTTPCookieStorage * HTTPCookieStorage; 
@property (retain) NSURLCredentialStorage * URLCredentialStorage; 
@property (retain) NSURLCache * URLCache; 
@property (assign) char shouldUseExtendedBackgroundIdleMode; 
@property (copy) NSArray * protocolClasses; 
@property (assign) char _requiresPowerPluggedIn; 
@property (copy) NSURL * _directoryForDownloadedFiles; 
@property (copy) NSString * _sourceApplicationBundleIdentifier; 
@property (copy) NSString * _sourceApplicationSecondaryIdentifier; 
@property (copy) NSData * _sourceApplicationAuditTokenData; 
@property (assign) unsigned _TCPAdaptiveReadTimeout; 
@property (assign) unsigned _TCPAdaptiveWriteTimeout; 
@property (assign) char _allowsExpensiveAccess; 
@property (assign) char _allowsPowerNapScheduling; 
@property (assign) char _preventsIdleSleepOnceConnected; 
@property (assign) char _sessionSendsLaunchOnDemandEvents; 
@property (assign) char _collectsTimingData; 
@property (assign) long long _timingDataOptions; 
@property (assign) char _shouldSkipPreferredClientCertificateLookup; 
@property (copy) NSString * _ledBellyServiceIdentifier; 
@property (copy) id<NSURLSessionAppleIDContext> _appleIDContext; 
@property (copy) NSData * _atsContext; 
@property (assign) double _connectionCachePurgeTimeout; 
@property (assign) double _connectionCacheCellPurgeTimeout; 
@property (assign) char _allowsRetryForBackgroundDataTasks; 
@property (assign) char _respectsAllowsCellularAccessForDiscretionaryTasks; 
@property (assign) char _overridesBackgroundSessionAutoRedirect; 
@property (assign) char _performsEVCertCheck; 
@property (assign) char _infersDiscretionaryFromOriginatingClient; 
@property (copy) NSString * _connectionPoolName; 
@property (assign) char _prefersInfraWiFi; 
@property (assign) char _allowsMultipathTCP; 
@property (assign) char _allowsResponseMonitoringDuringBodyTranmission; 
@property (assign) char _allowsIndefiniteConnections; 
@property (copy) NSString * _CTDataConnectionServiceType; 
@property (assign) char _allowsTCPFastOpen; 
@property (assign) char _allowsTLSSessionTickets; 
@property (assign) char _preventsDirectWiFiAccess; 
@property (getter=isBackgroundSession) char backgroundSession; 
@property (assign) NSString * disposition; 
@property (retain) NSURLCredentialStorage * _phskip_credStorage; 
@property (assign) char _phskip_credStorageSet; 
@property (retain) NSURLCache * _phskip_urlCache; 
@property (assign) char _phskip_urlCacheSet; 
@property (retain) NSHTTPCookieStorage * _phskip_cookieStorage; 
@property (assign) char _phskip_cookieStorageSet; 
@property (retain) CFHSTSPolicyRef _phskip_hstsStorage; 
@property (assign) char _phskip_hstsStorageSet; 
@property (assign) int pipeliningHighWatermark; 
@property (assign) int pipeliningLowWatermark; 
@property (assign) int numPriorityLevels; 
@property (assign) int numFastLanes; 
@property (assign) int minimumFastLanePriority; 
@property (assign) char skip_download_unlink; 
@property (assign) char _requiresClientToOpenFiles; 
@property (copy) NSString * _tcpConnectionPoolName; 
@property (assign) char _forcesNewConnections; 
@property (copy) NSDictionary * _socketStreamProperties; 
@property (assign) char _supportsAVAssetDownloads; 
@property (getter=_isProxySession) char _proxySession; 
@property (copy) NSSet * _authenticatorStatusCodes; 
@property (assign) char _disallowsSPDY; 
@property (assign) char _preventsIdleSleep; 
@property (assign) char _usePipeliningHeuristics; 
@property (copy) NSArray * _contentDispHeadEncFallback; 
@property (assign) char _shouldPreserveBackgroundSessionDisposition; 
@property (assign) char _disablesOutOfProcessDirectWiFiUsage; 
@property (assign) char _disablesUseOfProxySession; 
@property (copy) NSString * _companionAppBundleIdentifier; 
@property (copy) NSString * _watchAppBundleIdentifier; 
@property (copy) NSString * _watchExtensionBundleIdentifier; 
@property (assign) unsigned _forcedNetworkServiceType; 
@property (copy) NSDictionary * _overriddenDelegateOptions; 
+(id)_defaultProtocolClasses;
+(id)sessionConfigurationForSharedSession;
+(id)_AVBackgroundSessionConfigurationWithIdentifier:(id)arg1 ;
+(id)AVBackgroundSessionConfigurationWithIdentifier:(id)arg1 ;
+(id)_proxySessionConfigurationWithIdentifier:(id)arg1 ;
+(id)backgroundSessionConfiguration:(id)arg1 ;
+(id)defaultSessionConfiguration;
+(char)supportsSecureCoding;
+(id)backgroundSessionConfigurationWithIdentifier:(id)arg1 ;
+(id)ephemeralSessionConfiguration;
-(HTTPConnectionCacheLimits)getConnectionCacheLimits;
-(CFHSTSPolicyRef)copyHSTSPolicy;
-(void*)_copyAttribute:(CFStringRef)arg1 ;
-(OpaqueCFHTTPCookieStorageRef)_copyCFCookieStorage;
-(id)initWithDisposition:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
@end

