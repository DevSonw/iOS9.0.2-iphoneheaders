/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:31:03 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/Frameworks/SceneKit.framework/SceneKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <SceneKit/SceneKit-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@class SCNNode, SCNPhysicsShape;

@interface SCNPhysicsBody : NSObject <NSCopying, NSSecureCoding> {

	SCNNode* _node;
	float _mass;
	float _charge;
	float _friction;
	float _restitution;
	float _rollingFriction;
	SCNPhysicsShape* _physicsShape;
	int _type;
	float _damping;
	SCNVector4 _angularVelocity;
	float _angularDamping;
	SCNVector3 _velocityFactor;
	SCNVector3 _angularVelocityFactor;
	SCNVector3 _velocity;
	char _ignoreGravity;
	char _explicitMomentOfInertia;
	SCNVector3 _momentOfInertia;
	unsigned _categoryBitMask;
	unsigned _collisionBitMask;
	unsigned _contactTestBitMask;
	char _allowsResting;
	char _isDefaultShape;
	btRigidBody* _body;

}

@property (assign,nonatomic) int type; 
@property (assign,nonatomic) float mass; 
@property (assign,nonatomic) SCNVector3 momentOfInertia; 
@property (assign,nonatomic) char usesDefaultMomentOfInertia; 
@property (assign,nonatomic) float charge; 
@property (assign,nonatomic) float friction; 
@property (assign,nonatomic) float restitution; 
@property (assign,nonatomic) float rollingFriction; 
@property (nonatomic,retain) SCNPhysicsShape * physicsShape; 
@property (nonatomic,readonly) char isResting; 
@property (assign,nonatomic) char allowsResting; 
@property (assign,nonatomic) SCNVector3 velocity; 
@property (assign,nonatomic) SCNVector4 angularVelocity; 
@property (assign,nonatomic) float damping; 
@property (assign,nonatomic) float angularDamping; 
@property (assign,nonatomic) SCNVector3 velocityFactor; 
@property (assign,nonatomic) SCNVector3 angularVelocityFactor; 
@property (assign,nonatomic) unsigned categoryBitMask; 
@property (assign,nonatomic) unsigned collisionBitMask; 
@property (assign,nonatomic) unsigned contactTestBitMask; 
@property (assign,getter=isAffectedByGravity,nonatomic) char affectedByGravity; 
+(id)bodyWithType:(int)arg1 shape:(id)arg2 ;
+(char)supportsSecureCoding;
+(id)staticBody;
+(id)kinematicBody;
+(id)dynamicBody;
-(btRigidBody*)_handle;
-(void)_removeOwner;
-(C3DSceneRef)sceneRef;
-(btRigidBody*)_createBody;
-(id)initWithType:(int)arg1 shape:(id)arg2 ;
-(btCollisionShape*)_shapeHandleWithShape:(id)arg1 owner:(id)arg2 ;
-(void)moveToTransform:(SCNMatrix4)arg1 ;
-(unsigned)contactTestBitMask;
-(void)setMomentOfInertia:(SCNVector3)arg1 ;
-(void)_didDecodeSCNPhysicsBody:(id)arg1 ;
-(char)respondsToCollision;
-(SCNVector3)momentOfInertia;
-(void)setUsesDefaultMomentOfInertia:(char)arg1 ;
-(char)usesDefaultMomentOfInertia;
-(char)isAffectedByGravity;
-(void)applyForce:(SCNVector3)arg1 impulse:(char)arg2 ;
-(void)applyTorque:(SCNVector4)arg1 impulse:(char)arg2 ;
-(void)clearAllForces;
-(void)resetToTransform:(SCNMatrix4)arg1 ;
-(void)moveToPosition:(SCNVector3)arg1 ;
-(void)rotateToAxisAngle:(SCNVector4)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(void)dealloc;
-(id)copy;
-(void)setVelocity:(SCNVector3)arg1 ;
-(void)setDamping:(float)arg1 ;
-(void)setMass:(float)arg1 ;
-(void)setType:(int)arg1 ;
-(int)type;
-(float)charge;
-(id)copyWithZone:(NSZone*)arg1 ;
-(void)setCharge:(float)arg1 ;
-(SCNVector3)velocity;
-(float)damping;
-(void)setFriction:(float)arg1 ;
-(void)setRestitution:(float)arg1 ;
-(float)friction;
-(void)setAngularDamping:(float)arg1 ;
-(SCNVector4)angularVelocity;
-(void)setAngularVelocity:(SCNVector4)arg1 ;
-(float)restitution;
-(float)angularDamping;
-(float)mass;
-(void)resetTransform;
-(id)_owner;
-(void)_setOwner:(id)arg1 ;
-(unsigned)categoryBitMask;
-(void)setCategoryBitMask:(unsigned)arg1 ;
-(void)setAffectedByGravity:(char)arg1 ;
-(unsigned)collisionBitMask;
-(void)setCollisionBitMask:(unsigned)arg1 ;
-(void)setContactTestBitMask:(unsigned)arg1 ;
-(char)isResting;
-(void)_activate;
-(void)applyForce:(SCNVector3)arg1 atPosition:(SCNVector3)arg2 impulse:(char)arg3 ;
-(void)setPhysicsShape:(SCNPhysicsShape *)arg1 ;
-(float)rollingFriction;
-(void)setRollingFriction:(float)arg1 ;
-(SCNPhysicsShape *)physicsShape;
-(char)allowsResting;
-(void)setAllowsResting:(char)arg1 ;
-(SCNVector3)velocityFactor;
-(void)setVelocityFactor:(SCNVector3)arg1 ;
-(SCNVector3)angularVelocityFactor;
-(void)setAngularVelocityFactor:(SCNVector3)arg1 ;
@end

