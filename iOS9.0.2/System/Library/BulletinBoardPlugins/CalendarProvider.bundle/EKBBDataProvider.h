/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:04:54 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/BulletinBoardPlugins/CalendarProvider.bundle/CalendarProvider
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <libobjc.A.dylib/BBDataProvider.h>

@protocol OS_dispatch_queue, OS_dispatch_source;
@class NSObject, NSMutableDictionary, NSTimer, EKEventStore, EKTravelEngine, RTRoutineManager, NSDateFormatter, NSString;

@interface EKBBDataProvider : NSObject <BBDataProvider> {

	NSObject*<OS_dispatch_queue> _alertQueue;
	NSObject*<OS_dispatch_queue> _databaseQueue;
	NSMutableDictionary* _alerts;
	NSMutableDictionary* _alertRecordIDsToAlertInfos;
	NSMutableDictionary* _alertRecordIDsToRefreshTimers;
	NSTimer* _syncTimer;
	char _pendingChanges;
	NSObject*<OS_dispatch_queue> _eventStoreQueue;
	EKEventStore* _eventStore;
	EKTravelEngine* _travelEngine;
	RTRoutineManager* _coreRoutineManager;
	NSObject*<OS_dispatch_source> _eventStoreIdleTimerSource;
	char _ignoreLowLevelDatabaseChangedNotifications;
	NSDateFormatter* _remindersDateFormatter;

}

@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> databaseQueue; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)_reminderForBulletinWithRecordID:(id)arg1 eventStore:(id)arg2 ;
+(char)_alertHasTravelInformation:(id)arg1 ;
+(char)_mayCeaseRouteMonitoringForAlertInfo:(id)arg1 ;
+(id)_messageForHypothesis:(id)arg1 eventLocation:(id)arg2 ;
+(char)_date:(id)arg1 representsApproachingDepartureDateForHypothesis:(id)arg2 ;
+(char)_date:(id)arg1 representsImmediateDepartureForHypothesis:(id)arg2 ;
+(char)_date:(id)arg1 representsLatenessForHypothesis:(id)arg2 ;
+(id)_directionsModeForAlertInfo:(id)arg1 ;
+(id)_representationForRequest:(id)arg1 eventIfExists:(id)arg2 displayTimeZone:(id)arg3 ;
+(char)_date:(id)arg1 isWithinEightMinutesOfDate:(id)arg2 ;
+(char)_timeToLeaveStateAlreadyDisplayedBasedOnHypothesis:(id)arg1 alertInfo:(id)arg2 date:(id)arg3 ;
+(id)userActivityUserInfoForEvent:(id)arg1 ;
+(id)timeMessageForHypothesis:(id)arg1 ;
+(id)reminderForBulletinRequest:(id)arg1 eventStore:(id)arg2 ;
-(char)supportsAlerts;
-(id)actionButtonTitleForAlertInfo:(id)arg1 ;
-(char)shouldCompleteReminderWhenCustomActionExecuted:(id)arg1 ;
-(id)actionButtonColorForAlertInfo:(id)arg1 ;
-(id)viewActionForAlertInfo:(id)arg1 ;
-(id)snoozeActionForAlertInfo:(id)arg1 timeSpan:(int)arg2 ;
-(void)addSnoozeSubAction:(id)arg1 toBulletin:(id)arg2 ;
-(id)customActionSupplementaryActionForAlertInfo:(id)arg1 bulletin:(id)arg2 ;
-(void)_killEventStoreIdleTimer;
-(char)supportsTravelAdvice;
-(void)_receivedHypothesis:(id)arg1 forEventWithExternalURL:(id)arg2 ;
-(void)_clearTravelAdvisoryHypotheses;
-(char)_shouldIncludeCoreRoutineSupplementaryActions;
-(id)_findAlarmForCalendarItem:(id)arg1 matchingExternalID:(id)arg2 ;
-(void)_removeRefreshTimerForEventWithExternalURL:(id)arg1 ;
-(void)_eventStoreChangedNotification:(id)arg1 ;
-(void)_resetEventStoreIdleTimer;
-(void)eventStoreWillClose;
-(id)modalTitleForAlertInfo:(id)arg1 ;
-(id)modalSubtitleForAlertInfo:(id)arg1 ;
-(void)_withdrawAlertBulletin:(id)arg1 ;
-(void)_bulletinRequestAcknowledged:(id)arg1 alertInfo:(id)arg2 performActions:(/*^block*/id)arg3 ;
-(id)messageStringForAlert:(id)arg1 ;
-(id)expirationDateForAlertInfo:(id)arg1 ;
-(void)_addAlertModalContent:(id)arg1 bulletin:(id)arg2 ;
-(void)_setEventRepresentationForAlertInfo:(id)arg1 onBulletin:(id)arg2 ;
-(id)defaultURLForAlertInfo:(id)arg1 ;
-(char)allowsLocationAlerts;
-(id)viewButtonTitleForAlertInfo:(id)arg1 ;
-(void)_postBulletinGeneratedFrom:(id)arg1 isEventAlert:(char)arg2 shouldModify:(char)arg3 shouldWithDrawExisting:(char)arg4 ;
-(id)_bulletinRequestWithAlertInfo:(id)arg1 ;
-(void)setUpLayoutDataForPluginWithBulletin:(id)arg1 alertInfo:(id)arg2 ;
-(void)_clearHypothesisAndUpdateBulletinForAlertInfo:(id)arg1 ;
-(void)_recordUpcomingEventAlertSuppression;
-(void)_recordDisplayOfInitialTimeToLeaveAlert;
-(void)_updateRefreshTimerForEventWithExternalURL:(id)arg1 ;
-(void)_setUpRefreshTimerAt:(id)arg1 forEventWithExternalURL:(id)arg2 ;
-(void)_significantTimeChanged;
-(id)emptyModalTitle;
-(void)alarmsDidFire:(id)arg1 ;
-(void)bulletinClosed:(id)arg1 ;
-(char)_shouldRefire;
-(void)_alarmsDidFire:(id)arg1 ;
-(void)performCalendarItemForBulletin:(id)arg1 action:(/*^block*/id)arg2 ;
-(void)acknowledgeAlerts:(id)arg1 ;
-(void)removeAlerts:(id)arg1 ;
-(void)firstUnlock;
-(id)entityScheme;
-(NSObject*<OS_dispatch_queue>)databaseQueue;
-(void)clearAllAlerts;
-(void)clearAlerts:(id)arg1 ;
-(void)performCalendarItemForRecordID:(id)arg1 action:(/*^block*/id)arg2 ;
-(void)acknowledgeAlert:(id)arg1 performActions:(/*^block*/id)arg2 ;
-(id)supplementaryActionsForAlertInfo:(id)arg1 bulletin:(id)arg2 ;
-(id)supplementaryActionsForCompactLayoutForAlertInfo:(id)arg1 bulletin:(id)arg2 ;
-(id)directionsActionForAlertInfo:(id)arg1 ;
-(void)acknowledgeAlerts:(id)arg1 includeRefiringAlerts:(char)arg2 ;
-(id)modalMessageForAlertInfo:(id)arg1 ;
-(void)_killSyncTimer;
-(void)_syncTimerFired:(id)arg1 ;
-(void)_resetSyncTimer;
-(void)_databaseChanged;
-(void)_calDatabaseChangedNotificationReceived;
-(id)eventStore;
-(unsigned)allowedEntityTypes;
-(void)_timeZoneChanged:(id)arg1 ;
-(void)_syncDidStart;
-(void)_syncDidEnd;
-(void)dealloc;
-(id)init;
-(id)sortDescriptors;
-(void)databaseChanged:(id)arg1 ;
-(void)_refreshTimerFired:(id)arg1 ;
-(id)bulletinsWithRequestParameters:(id)arg1 lastCleared:(id)arg2 ;
-(id)clearedInfoForBulletins:(id)arg1 lastClearedInfo:(id)arg2 ;
-(void)dataProviderDidLoad;
-(char)syncsBulletinDismissal;
-(id)alerts;
-(id)sectionIdentifier;
@end

