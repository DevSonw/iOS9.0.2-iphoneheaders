/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:39:05 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/PrivateFrameworks/PairedUnlock.framework/pairedunlockd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <libobjc.A.dylib/NSXPCListenerDelegate.h>
#import <pairedunlockd/PUPeerDelegate.h>
#import <libobjc.A.dylib/MCProfileConnectionObserver.h>
#import <libobjc.A.dylib/PUUnlockServer.h>

@class NSXPCListener, NSXPCConnection, PUPeer, NSMutableSet, NSString;

@interface PUServer : NSObject <NSXPCListenerDelegate, PUPeerDelegate, MCProfileConnectionObserver, PUUnlockServer> {

	NSXPCListener* _listener;
	/*^block*/id _requestPasscodeActionHandler;
	NSXPCConnection* _actionServerConnection;
	PUPeer* _peer;
	NSMutableSet* _connections;

}

@property (nonatomic,readonly) PUPeer * peer;                                      //@synthesize peer=_peer - In the implementation block
@property (nonatomic,readonly) NSMutableSet * connections;                         //@synthesize connections=_connections - In the implementation block
@property (assign,nonatomic) char gizmoWantsNotificationOnNextUnlock; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)setGizmoWantsNotificationOnNextUnlock:(char)arg1 ;
-(void)_handlePasscodeRemoval;
-(char)gizmoWantsNotificationOnNextUnlock;
-(PUPeer *)peer;
-(void)_removeConnection:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(char)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(NSMutableSet *)connections;
-(void)checkIn;
-(void)peer:(id)arg1 remoteDeviceRequestsPasscodeAction:(int)arg2 type:(int)arg3 existingPasscode:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)peerRemoteDeviceDidUnlock:(id)arg1 ;
-(void)peer:(id)arg1 wantsNotificationOfNextUnlock:(char)arg2 ;
-(void)peer:(id)arg1 didNotifyStateHasPasscode:(char)arg2 isPasscodeLocked:(char)arg3 isUnlockOnly:(char)arg4 ;
-(void)peer:(id)arg1 didPairForUnlock:(char)arg2 error:(id)arg3 ;
-(void)requestRemoteDeviceUnlockNotification;
-(void)pairForUnlockWithPasscode:(id)arg1 ;
-(void)unpairForUnlock;
-(void)enableOnlyRemoteUnlockWithPasscode:(id)arg1 ;
-(void)disableOnlyRemoteUnlock;
-(void)requestRemoteDevicePasscodeAction:(int)arg1 type:(int)arg2 ;
-(void)requestRemoteDeviceRemoveLockout;
-(void)didCompletePasscodeAction:(char)arg1 error:(id)arg2 ;
-(void)getRemoteDeviceState;
@end

