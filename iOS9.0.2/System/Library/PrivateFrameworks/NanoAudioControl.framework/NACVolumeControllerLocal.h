/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:33:25 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/PrivateFrameworks/NanoAudioControl.framework/NanoAudioControl
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <libobjc.A.dylib/MPVolumeControllerDelegate.h>
#import <libobjc.A.dylib/MPAVRoutingControllerDelegate.h>
#import <libobjc.A.dylib/NACVolumeController.h>

@protocol NACVolumeControllerDelegate;
@class MPVolumeController, MPAVRoutingController, NSString, NSCountedSet, NACEventThrottler;

@interface NACVolumeControllerLocal : NSObject <MPVolumeControllerDelegate, MPAVRoutingControllerDelegate, NACVolumeController> {

	MPVolumeController* _volumeController;
	MPAVRoutingController* _routingController;
	NSString* _audioCategory;
	NSCountedSet* _volumeSetHistory;
	NACEventThrottler* _volumeThrottler;
	NACEventThrottler* _hapticThrottler;
	char _systemMuted;
	id<NACVolumeControllerDelegate> _delegate;

}

@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (assign,nonatomic,__weak) id<NACVolumeControllerDelegate> delegate;                            //@synthesize delegate=_delegate - In the implementation block
@property (getter=isVolumeControlAvailable,nonatomic,readonly) char volumeControlAvailable; 
@property (getter=isVolumeWarningEnabled,nonatomic,readonly) char volumeWarningEnabled; 
@property (getter=isMuted,nonatomic,readonly) char muted; 
@property (nonatomic,readonly) float volumeValue; 
@property (nonatomic,readonly) float EUVolumeLimit; 
@property (assign,nonatomic) float hapticIntensity; 
@property (assign,getter=isSystemMuted,nonatomic) char systemMuted;                                      //@synthesize systemMuted=_systemMuted - In the implementation block
-(void)routingControllerAvailableRoutesDidChange:(id)arg1 ;
-(void)setVolumeValue:(float)arg1 ;
-(void)setMuted:(char)arg1 ;
-(float)EUVolumeLimit;
-(void)volumeController:(id)arg1 volumeValueDidChange:(float)arg2 ;
-(void)volumeController:(id)arg1 mutedStateDidChange:(char)arg2 ;
-(void)volumeController:(id)arg1 EUVolumeLimitDidChange:(float)arg2 ;
-(id)initWithAudioCategory:(id)arg1 ;
-(float)volumeValue;
-(void)setDelegate:(id<NACVolumeControllerDelegate>)arg1 ;
-(id)init;
-(id<NACVolumeControllerDelegate>)delegate;
-(void)beginObservingVolume;
-(void)endObservingVolume;
-(void)setHapticIntensity:(float)arg1 ;
-(void)setSystemMuted:(char)arg1 ;
-(void)beginObservingHapticIntensity;
-(char)isVolumeControlAvailable;
-(char)isVolumeWarningEnabled;
-(void)_setVolumeValue:(id)arg1 ;
-(void)_setHapticIntensity:(id)arg1 ;
-(void)setVolumeValue:(float)arg1 muted:(char)arg2 overrideEULimit:(char)arg3 ;
-(float)hapticIntensity;
-(char)isSystemMuted;
-(void)endObservingHapticIntensity;
-(void)playPreview;
-(void)_hapticIntensityDidChange:(id)arg1 ;
-(char)isMuted;
@end

