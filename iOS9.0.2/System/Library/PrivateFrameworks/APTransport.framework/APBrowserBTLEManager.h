/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:31:42 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/PrivateFrameworks/APTransport.framework/APTransport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <APTransport/APTransport-Structs.h>
#import <APTransport/APBluetoothClientDelegate.h>

@protocol OS_dispatch_queue, OS_dispatch_source;
@class APBluetoothClient, NSObject, NSMutableDictionary, NSString;

@interface APBrowserBTLEManager : NSObject <APBluetoothClientDelegate> {

	unsigned short _btleMode;
	char _p2pSoloSupported;
	char _p2pSoloSupportedIsSet;
	char _trackingEnabled;
	char _isAdvertising;
	char _isScanning;
	char _isEnabled;
	char _preferencesUpdated;
	char _isInvalidated;
	char _isSoloBeaconDisabled;
	APBluetoothClient* _btleClient;
	void* _eventHandlerContext;
	/*function pointer*/void* _eventHandlerFunc;
	NSObject*<OS_dispatch_queue> _eventQueue;
	NSObject*<OS_dispatch_queue> _queue;
	OpaqueAPBrowserBTLEManager* _managerRef;
	NSMutableDictionary* _btleDevices;
	NSObject*<OS_dispatch_source> _staleDevicesTimer;

}

@property (nonatomic,retain) APBluetoothClient * btleClient;                               //@synthesize btleClient=_btleClient - In the implementation block
@property (assign,nonatomic) void* eventHandlerContext;                                    //@synthesize eventHandlerContext=_eventHandlerContext - In the implementation block
@property (assign,nonatomic) /*function pointer*/void* eventHandlerFunc;                   //@synthesize eventHandlerFunc=_eventHandlerFunc - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> eventQueue;                    //@synthesize eventQueue=_eventQueue - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> queue;                         //@synthesize queue=_queue - In the implementation block
@property (assign,nonatomic) char isAdvertising;                                           //@synthesize isAdvertising=_isAdvertising - In the implementation block
@property (assign,nonatomic) char isEnabled;                                               //@synthesize isEnabled=_isEnabled - In the implementation block
@property (assign,nonatomic) char isScanning;                                              //@synthesize isScanning=_isScanning - In the implementation block
@property (assign,nonatomic) char isSoloBeaconDisabled;                                    //@synthesize isSoloBeaconDisabled=_isSoloBeaconDisabled - In the implementation block
@property (assign,nonatomic) char isInvalidated;                                           //@synthesize isInvalidated=_isInvalidated - In the implementation block
@property (assign,nonatomic) char preferencesUpdated;                                      //@synthesize preferencesUpdated=_preferencesUpdated - In the implementation block
@property (assign,nonatomic) OpaqueAPBrowserBTLEManager* managerRef;                       //@synthesize managerRef=_managerRef - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * btleDevices;                            //@synthesize btleDevices=_btleDevices - In the implementation block
@property (assign,nonatomic) NSObject*<OS_dispatch_source> staleDevicesTimer;              //@synthesize staleDevicesTimer=_staleDevicesTimer - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(long)createEventInfoDictionary:(id*)arg1 withDeviceID:(id)arg2 IPAddress:(id)arg3 port:(id)arg4 supportsSolo:(id)arg5 rssi:(id)arg6 ;
-(void)setIsScanning:(char)arg1 ;
-(char)isAdvertising;
-(void)setIsAdvertising:(char)arg1 ;
-(NSObject*<OS_dispatch_queue>)queue;
-(void)dealloc;
-(id)init;
-(long)invalidate;
-(long)stop;
-(char)isEnabled;
-(void)setIsEnabled:(char)arg1 ;
-(long)update;
-(long)setBTLEMode:(unsigned short)arg1 ;
-(long)getBTLEMode:(unsigned short*)arg1 ;
-(long)setEventHandler:(/*function pointer*/void*)arg1 context:(void*)arg2 managerRef:(OpaqueAPBrowserBTLEManager*)arg3 ;
-(long)copyShowInfo:(id*)arg1 verbose:(char)arg2 ;
-(long)ensurePreferencesUpdatedWithShouldForce:(char)arg1 ;
-(long)setSupportsSolo:(char)arg1 ;
-(long)setTrackingEnabled:(char)arg1 ;
-(long)dispatchEvent:(unsigned)arg1 withEventInfo:(id)arg2 ;
-(void)setIsInvalidated:(char)arg1 ;
-(long)ensureBTLEClientInitialized;
-(id)stringForBTLEmode:(unsigned short)arg1 ;
-(void)setEventHandlerFunc:(/*function pointer*/void*)arg1 ;
-(void)setEventHandlerContext:(void*)arg1 ;
-(void)setManagerRef:(OpaqueAPBrowserBTLEManager*)arg1 ;
-(NSMutableDictionary *)btleDevices;
-(APBluetoothClient *)btleClient;
-(long)ensureAdvertisingStopped;
-(long)ensureScanningStopped;
-(long)ensureScanningStarted;
-(char)isSoloBeaconDisabled;
-(unsigned)nearbySoloDevicesCount;
-(long)ensureAdvertisingStarted;
-(char)preferencesUpdated;
-(void)setIsSoloBeaconDisabled:(char)arg1 ;
-(void)setPreferencesUpdated:(char)arg1 ;
-(long)startMode:(unsigned short)arg1 ;
-(void)setBtleClient:(APBluetoothClient *)arg1 ;
-(long)handleLostDevice:(id)arg1 ;
-(NSObject*<OS_dispatch_source>)staleDevicesTimer;
-(void)setStaleDevicesTimer:(NSObject*<OS_dispatch_source>)arg1 ;
-(/*function pointer*/void*)eventHandlerFunc;
-(OpaqueAPBrowserBTLEManager*)managerRef;
-(void*)eventHandlerContext;
-(long)ensureStaleDeviceTimerStarted;
-(long)dispatchLostEventForAllDevices;
-(long)handleFoundDevice:(id)arg1 withAdvertisementData:(SCD_Struct_AP0*)arg2 rssi:(int)arg3 ;
-(void)setBtleDevices:(NSMutableDictionary *)arg1 ;
-(char)isScanning;
-(NSObject*<OS_dispatch_queue>)eventQueue;
-(char)isInvalidated;
-(void)airPlaySolo:(id)arg1 failedToStartAdvertisingWithError:(id)arg2 ;
-(void)airPlaySolo:(id)arg1 failedToStartScanningWithError:(id)arg2 ;
-(void)airPlaySolo:(id)arg1 foundDevice:(id)arg2 withData:(id)arg3 ;
-(void)airPlaySoloStartedAdvertising:(id)arg1 ;
-(void)airPlaySoloStoppedAdvertising:(id)arg1 ;
-(void)airPlaySoloStartedScanning:(id)arg1 ;
-(void)airPlaySoloStoppedScanning:(id)arg1 ;
-(void)airPlaySoloDidUpdateState:(id)arg1 ;
@end

