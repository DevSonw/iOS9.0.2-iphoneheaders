/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:38:32 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/PrivateFrameworks/GameKitServices.framework/Frameworks/AVConference.framework/AVConference
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <AVConference/AVConference-Structs.h>
#import <libobjc.A.dylib/VCMediaStreamProtocol.h>
#import <libobjc.A.dylib/WRMClientDelegate.h>
#import <libobjc.A.dylib/VCAudioIOClient.h>

@protocol OS_dispatch_source, OS_dispatch_queue, VCMediaStreamDelegate;
@class NSObject, NSMutableArray, DTMFEventHandler, WRMClient, VCAudioPayload, VCJitterBuffer, NSString, AVCMediaStreamConfig;

@interface VCAudioStream : NSObject <VCMediaStreamProtocol, WRMClientDelegate, VCAudioIOClient> {

	int numBufferBytesAvailable;
	NSObject*<OS_dispatch_source> pausedAudioHeartBeat;
	double dAudioHostTime;
	double _rtpTimeoutEnabledTime;
	double _rtcpTimeoutEnabledTime;
	char lastVoiceActive;
	double lastRTPTimeoutReportTime;
	double lastRTCPTimeoutReportTime;
	tagHANDLE* rtpHandle;
	char* bundleBuffer;
	unsigned conferenceID;
	unsigned lastInputAudioTimeStamp;
	unsigned lastSentAudioSampleTime;
	unsigned packetTimeoutCheckCounter;
	int sampleRate;
	int samplesPerFrame;
	opaque_pthread_rwlock_t stateLock;
	opaque_pthread_mutex_t sessionLock;
	NSMutableArray* audioPayloads;
	AudioStreamBasicDescription vpioFormat;
	int preferredAudioCodec;
	DTMFEventHandler* dtmfEventHandler;
	WRMClient* wrmClient;
	VCAudioPayload* currentAudioPayload;
	VCJitterBuffer* vcJitterBuffer;
	NSString* callID;
	opaqueRTCReportingRef reportingAgent;
	METER_INFO soundMeter[2];
	NSObject*<OS_dispatch_queue> delegateNotificationQueue;
	int state;
	char isSRTPInitialized;
	char isValid;
	int deviceRole;
	AVCMediaStreamConfig* streamConfig;
	NSObject*<VCMediaStreamDelegate> delegate;

}

@property (assign,nonatomic) NSObject*<VCMediaStreamDelegate> delegate; 
@property (readonly) unsigned conferenceID; 
@property (assign) char isValid; 
@property (assign) int deviceRole; 
@property (nonatomic,retain) AVCMediaStreamConfig * streamConfig; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(char)isSameSRTPKey:(id)arg1 newKey:(id)arg2 ;
-(void)setDelegate:(NSObject*<VCMediaStreamDelegate>)arg1 ;
-(void)dealloc;
-(id)init;
-(NSObject*<VCMediaStreamDelegate>)delegate;
-(char)isValid;
-(void)stop;
-(void)lock;
-(void)unlock;
-(void)start;
-(int)encodeAudio:(void*)arg1 numInputBytes:(int)arg2 outputBytes:(void*)arg3 numOutputBytes:(int)arg4 withPayload:(int*)arg5 ;
-(int)sendSamples:(char*)arg1 numEncodedBytes:(int)arg2 withPayload:(int)arg3 timeStamp:(unsigned)arg4 bufferedSamples:(int)arg5 hasNewSamples:(char)arg6 voiceActivity:(char)arg7 ;
-(void)checkPacketTimeouts;
-(char)setupAudioEncoders;
-(char)allocateBundleBuffer;
-(unsigned long)codecTypeFromAudioPayload:(int)arg1 ;
-(int)deviceRole;
-(AVCMediaStreamConfig *)streamConfig;
-(char)setupAudioCodecWithPayload:(int)arg1 ;
-(unsigned long)AMRModeToBitrate;
-(id)addAudioPayload:(int)arg1 ;
-(unsigned long)preferredAudioBitrate;
-(int)getSRTPMasterKeyLength:(int)arg1 ;
-(long)getCryptoSet:(tagSRTPExchangeInfo*)arg1 withMasterKey:(id)arg2 ;
-(int)SRTPCipherSuiteForLTECipherSuite:(int)arg1 ;
-(void)initializeWRM;
-(void)setFrequencyMeteringEnabled:(char)arg1 meterType:(int)arg2 ;
-(void)uninitializeWRM;
-(id)setupRTPWithSockets:(id)arg1 error:(id*)arg2 ;
-(id)setupRTPWithLocalParticipantInfo:(id)arg1 error:(id*)arg2 ;
-(id)supportedAudioPayloads;
-(char)isSameSRTPConfig:(id)arg1 ;
-(void)setStreamConfig:(AVCMediaStreamConfig *)arg1 ;
-(void)setDeviceRole:(int)arg1 ;
-(void)setupRTPPayloadsWithDestinationIPPort:(tagIPPORT*)arg1 ;
-(long)setupSRTP;
-(char)configureAudioStreamWithConfiguration:(id)arg1 error:(id*)arg2 ;
-(char)choosePayload:(int*)arg1 count:(int)arg2 ;
-(char)setRTPPayloads:(int*)arg1 numPayloads:(int)arg2 withError:(id*)arg3 ;
-(void)setRtcpEnabled:(char)arg1 ;
-(void)setRtpTimeOutEnabled:(char)arg1 ;
-(void)setRtcpTimeOutEnabled:(char)arg1 ;
-(void)setRtpTimeOutInterval:(double)arg1 ;
-(void)setRtcpTimeOutInterval:(double)arg1 ;
-(void)setRtcpSendInterval:(double)arg1 ;
-(void)startWRM;
-(void)startAudioWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)stopPausedHeartbeat;
-(void)stopAudioWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)stopWRM;
-(void)startPausedHeartbeat;
-(int)captureMeshMode:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 bufferedSamples:(int)arg5 hostTime:(double)arg6 voiceActivity:(char)arg7 ;
-(void)updateSoundMeter:(int)arg1 samples:(char*)arg2 numSamples:(int)arg3 averagePower:(float)arg4 voiceActivity:(unsigned long)arg5 ;
-(void)pullDecodedMeshMode:(char*)arg1 timestamp:(unsigned)arg2 numBytes:(int)arg3 numSamples:(int)arg4 ;
-(void)setIsValid:(char)arg1 ;
-(id)setLocalParticipantInfo:(id)arg1 networkSockets:(id)arg2 withError:(id*)arg3 ;
-(char)setStreamConfig:(id)arg1 withError:(id*)arg2 ;
-(void)setPause:(char)arg1 ;
-(void)setStreamDirection:(int)arg1 ;
-(int)streamDirection;
-(void)setWRMMetricConfig:(SCD_Struct_VC13*)arg1 ;
-(char)onCaptureSound:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 timeStampDelta:(int)arg5 bufferedSamples:(int)arg6 hostTime:(double)arg7 averagePower:(float)arg8 voiceActivity:(unsigned long)arg9 ;
-(char)onPlaySound:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 averagePower:(float)arg5 ;
-(char)canProcessAudio;
-(void)setCanProcessAudio:(char)arg1 ;
-(void)reportRTCPPackets:(tagRTCPPACKET*)arg1 withCount:(int)arg2 ;
-(char)isFrequencyMeteringEnabled:(int)arg1 ;
-(void)sendDTMFEvent:(id)arg1 ;
-(void)stopSendDTMFEvent;
-(void)reportWRMMetrics:(const SCD_Struct_VC17*)arg1 ;
-(unsigned)conferenceID;
@end

