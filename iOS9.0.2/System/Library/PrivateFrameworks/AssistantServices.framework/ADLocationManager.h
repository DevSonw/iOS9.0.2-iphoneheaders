/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:38:03 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <assistantd/ADPeerLocationConnectionDelegate.h>
#import <libobjc.A.dylib/CLLocationManagerDelegate.h>

@protocol ADLocationManagerDelegate, OS_dispatch_queue, OS_dispatch_source;
@class NSObject, CLLocationManager, ADPeerLocationConnection, SAGetRequestOrigin, CLLocation, CLInUseAssertion, GEOLocationShifter, NSString;

@interface ADLocationManager : NSObject <ADPeerLocationConnectionDelegate, CLLocationManagerDelegate> {

	id<ADLocationManagerDelegate> _delegate;
	NSObject*<OS_dispatch_queue> _externalQueue;
	char _needsToSendLocation;
	char _isNavigating;
	NSObject*<OS_dispatch_queue> _internalQueue;
	CLLocationManager* _locationManager;
	int _lastLocationAuthorizationStatus;
	char _lastLocationServicesIsEnabled;
	ADPeerLocationConnection* _peerLocationConnection;
	SAGetRequestOrigin* _requestOriginCommand;
	NSObject*<OS_dispatch_source> _locationTimerSource;
	CLLocation* _lastLocation;
	CLInUseAssertion* _locationInUseAssertion;
	unsigned _locationInUseAssertionRefCount;
	GEOLocationShifter* _locationShifter;
	CLLocation* _lastPeerLocation;
	/*^block*/id _updateCompletion;

}

@property (assign,nonatomic,__weak) id<ADLocationManagerDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic) char needsToSendLocation;                                   //@synthesize needsToSendLocation=_needsToSendLocation - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(char)_shouldUseOneshotLocationRequest;
+(char)isLocationRestricted;
-(void)stopLocationUpdates;
-(void)acquireLocationInUseAssertionForReason:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)releaseLocationInUseAssertionForReason:(id)arg1 ;
-(void)peerLocationConnectionSuggestsClearingCachedLocation:(id)arg1 ;
-(void)peerLocationConnection:(id)arg1 didReceiveUnsolicitedLocation:(id)arg2 ;
-(void)setNeedsToSendLocation:(char)arg1 ;
-(void)getCachedRequestOrigin:(/*^block*/id)arg1 ;
-(void)updateLocationForCommand:(id)arg1 completion:(/*^block*/id)arg2 ;
-(char)needsToSendLocation;
-(id)_peerLocationConnection;
-(void)_navStatusChanged:(id)arg1 ;
-(void)_cancelLocationTimer;
-(int)_locationAuthStatus;
-(id)_locationShifter;
-(void)_generateResponseForGetRequestOriginCommand:(id)arg1 withStatus:(id)arg2 completion:(/*^block*/id)arg3 ;
-(id)_bestCachedLocation;
-(void)_generateResponseForGetRequestOriginCommand:(id)arg1 withUnshiftedLocation:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)_generateLocationTimedOutResponseForGetRequestOriginCommand:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_clearCompletionState;
-(void)_startMonitoringLocationWithDesiredAccuracy:(double)arg1 ;
-(void)_scheduleLocationTimerWithTimeout:(double)arg1 ;
-(void)_processUpdatedLocation:(id)arg1 ;
-(void)_requestLocationWithBestAccuracy;
-(char)_locationServicesIsEnabled;
-(char)_locationAuthStatusIsDenied:(int)arg1 ;
-(char)_shouldSendLocationUpdate:(id)arg1 fromLocation:(id)arg2 forCommand:(id)arg3 ;
-(void)_generateLocationDeniedResponseForGetRequestOriginCommand:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_generateLocationUnknownResponseForGetRequestOriginCommand:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_generateLocationDisabledResponseForGetRequestOriginCommand:(id)arg1 completion:(/*^block*/id)arg2 ;
-(id)_commandForCachedLocation;
-(void)_requestLocationForGetRequestOrigin:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_startMonitoringLocationForGetRequestOrigin:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_stopMonitoringLocation;
-(void)locationManager:(id)arg1 didChangeAuthorizationStatus:(int)arg2 ;
-(void)locationManager:(id)arg1 didUpdateLocations:(id)arg2 ;
-(void)setDelegate:(id<ADLocationManagerDelegate>)arg1 ;
-(void)dealloc;
-(id<ADLocationManagerDelegate>)delegate;
-(id)initWithSerialQueue:(id)arg1 ;
-(id)_locationManager;
-(void)locationManager:(id)arg1 didFailWithError:(id)arg2 ;
@end

