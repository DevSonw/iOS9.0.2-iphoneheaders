/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:38:02 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <assistantd/ADHandsFreeStateChangedObserver.h>
#import <libobjc.A.dylib/NSXPCListenerDelegate.h>
#import <libobjc.A.dylib/AFPendingSpeechRequestService.h>
#import <assistantd/ADCommandCenterClient.h>
#import <assistantd/ADCommandCenterRequestDelegate.h>
#import <assistantd/ADCommandCenterSpeechDelegate.h>
#import <libobjc.A.dylib/AFClientService.h>

@protocol OS_dispatch_queue;
@class NSXPCConnection, NSObject, NSXPCListener, NSString;

@interface ADClientConnection : NSObject <ADHandsFreeStateChangedObserver, NSXPCListenerDelegate, AFPendingSpeechRequestService, ADCommandCenterClient, ADCommandCenterRequestDelegate, ADCommandCenterSpeechDelegate, AFClientService> {

	NSXPCConnection* _xpcConnection;
	NSObject*<OS_dispatch_queue> _queue;
	void* _levelsSharedMemory;
	NSXPCListener* _pendingSpeechRequestListener;
	NSXPCConnection* _pendingSpeechRequestConnection;
	/*^block*/id _pendingSpeechRequestContinue;
	NSObject*<OS_dispatch_queue> _pendingListenerQueue;
	long long _numberOfPresentedUIs;
	/*^block*/id _presentedUIReply;
	int _ringerStateToken;
	char _hasCachedADShouldSpeak;
	char _cachedADShouldSpeak;
	char _requestOptionsRequireTTS;
	char _serverIsForcingTTS;
	char _combinedShouldSpeakState;

}

@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)connectionDisconnected;
-(void)adMusicWasDetected;
-(void)adAcousticIDRequestWillStart;
-(void)adAcousticIDRequestDidFinishSuccessfully:(char)arg1 ;
-(void)adSpeechRecordingDidFail:(id)arg1 sessionUUID:(id)arg2 ;
-(void)adSpeechRecognitionDidFail:(id)arg1 sessionUUID:(id)arg2 ;
-(void)adInvalidateCurrentUserActivity;
-(char)adTextToSpeechIsMuted;
-(void)adRequestDidFinish;
-(void)adRequestDidFailWithError:(id)arg1 requestClass:(id)arg2 ;
-(void)adSetUserActivityInfo:(id)arg1 webpageURL:(id)arg2 ;
-(void)adServerRequestsTTSStateUnmuted:(char)arg1 ;
-(void)adSpeechRecognized:(id)arg1 usingSpeechModel:(id)arg2 sessionUUID:(id)arg3 ;
-(void)adSpeechRecognizedPartialResult:(id)arg1 usingSpeechModel:(id)arg2 ;
-(char)adWaitingForAudioFile;
-(void)adSpeechRecordingDidEndWithSessionUUID:(id)arg1 ;
-(void)adAceConnectionWillRetryOnError:(id)arg1 ;
-(void)adSpeechRecordingWillBeginWithSessionUUID:(id)arg1 ;
-(void)adSpeechRecordingDidBeginOnAVRecordRoute:(id)arg1 sessionUUID:(id)arg2 ;
-(void)adSpeechRecordingDidChangeAVRecordRoute:(id)arg1 sessionUUID:(id)arg2 ;
-(void)adSpeechRecordingDidUpdateAveragePower:(float)arg1 peakPower:(float)arg2 ;
-(void)adSpeechRecordingDidCancelWithSessionUUID:(id)arg1 ;
-(void)adSpeechRecordingDidRecognizeTokens:(id)arg1 sessionUUID:(id)arg2 ;
-(void)adSpeechRecordingDidRecognizePhrases:(id)arg1 sessionUUID:(id)arg2 ;
-(void)adRequestRequestedOpenURL:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)adRequestRequestedOpenApplicationWithBundleID:(id)arg1 URL:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)adRequestRequestedDismissAssistant;
-(void)adShouldSpeakStateDidChange:(char)arg1 ;
-(void)_unregisterForRingerStateNotification;
-(void)_cleanUpSharedMem;
-(void)_setRequestOptionsRequireTTS:(char)arg1 ;
-(id)_serviceDelegate;
-(id)_serviceDelegateWithErrorHandler:(/*^block*/id)arg1 ;
-(void)_setServerForcedTTS:(char)arg1 ;
-(void)_updateShouldSpeak;
-(void)_registerForRingerStateNotification;
-(void)_computeShouldSpeak;
-(void)_setADShouldSpeak:(char)arg1 ;
-(void)_updateSpeechRequestOptions:(id)arg1 ;
-(char)_shouldSpeak;
-(void)adGetBulletinContext:(/*^block*/id)arg1 ;
-(void)adRequestDidReceiveCommand:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)dealloc;
-(oneway void)endSession;
-(oneway void)cancelSpeech;
-(oneway void)stopSpeechWithOptions:(id)arg1 ;
-(char)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(oneway void)requestStateUpdateWithReply:(/*^block*/id)arg1 ;
-(oneway void)recordCancellationMetrics;
-(oneway void)recordFailureMetricsForError:(id)arg1 ;
-(oneway void)willPresentUIWithReply:(/*^block*/id)arg1 ;
-(oneway void)setLockState:(char)arg1 showingLockScreen:(char)arg2 ;
-(oneway void)startSpeechRequestWithOptions:(id)arg1 ;
-(oneway void)continuePendingSpeechRequest;
-(oneway void)startRecordingForPendingSpeechRequestWithOptions:(id)arg1 reply:(/*^block*/id)arg2 ;
-(oneway void)startAcousticIDRequestWithOptions:(id)arg1 context:(id)arg2 ;
-(oneway void)performGenericAceCommand:(id)arg1 interruptOutstandingRequest:(char)arg2 reply:(/*^block*/id)arg3 ;
-(oneway void)getDeferredObjectsWithIdentifiers:(id)arg1 completion:(/*^block*/id)arg2 ;
-(oneway void)willSetApplicationContextWithRefId:(id)arg1 ;
-(oneway void)setAlertContextDirty;
-(oneway void)prepareForPhoneCall;
-(oneway void)_startSpeechWithURL:(id)arg1 isNarrowBand:(char)arg2 ;
-(oneway void)_requestBarrierWithReply:(/*^block*/id)arg1 ;
-(oneway void)_barrierWithReply:(/*^block*/id)arg1 ;
-(oneway void)_clearAssistantInfoForAccountIdentifier:(id)arg1 ;
-(oneway void)_listInstalledServicesWithReply:(/*^block*/id)arg1 ;
-(oneway void)_pingServiceForIdentifier:(id)arg1 reply:(/*^block*/id)arg2 ;
-(oneway void)_sendLargeData:(id)arg1 reply:(/*^block*/id)arg2 ;
-(oneway void)_performCommandDictionary:(id)arg1 forBundleIdentifier:(id)arg2 reply:(/*^block*/id)arg3 ;
-(oneway void)_performTaskCommandDictionary:(id)arg1 forBundleIdentifier:(id)arg2 reply:(/*^block*/id)arg3 ;
-(oneway void)_broadcastCommandDictionary:(id)arg1 ;
-(oneway void)_fetchAppContextWithReply:(/*^block*/id)arg1 ;
-(oneway void)_refreshAssistantValidation;
-(oneway void)setIsStark:(char)arg1 ;
-(oneway void)forceAudioSessionActive;
-(oneway void)rollbackClearContext;
-(oneway void)telephonyRequestCompleted;
-(oneway void)recordUIMetrics:(id)arg1 ;
-(oneway void)setVoiceOverIsActive:(char)arg1 ;
-(oneway void)preheatWithStyle:(int)arg1 ;
-(oneway void)updateSpeechOptions:(id)arg1 ;
-(oneway void)startSpeechPronunciationRequestWithOptions:(id)arg1 pronunciationContext:(id)arg2 ;
-(oneway void)recordRequestMetric:(id)arg1 withTimestamp:(double)arg2 ;
-(oneway void)setOverriddenApplicationContext:(id)arg1 withContext:(id)arg2 ;
-(oneway void)startRequestWithInfo:(id)arg1 ;
-(oneway void)setApplicationContextForApplicationInfos:(id)arg1 ;
-(oneway void)didDismissUI;
-(oneway void)cancelRequest;
-(id)initWithXPCConnection:(id)arg1 ;
-(oneway void)setApplicationContext:(id)arg1 ;
-(oneway void)clearContext;
-(oneway void)rollbackRequest;
@end

