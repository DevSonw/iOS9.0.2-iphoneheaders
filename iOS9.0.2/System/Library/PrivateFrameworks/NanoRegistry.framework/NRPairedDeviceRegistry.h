/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:33:27 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <libobjc.A.dylib/NRPairedDeviceRegistryXPCFrameworkDelegate.h>
#import <libobjc.A.dylib/NSXPCConnectionDelegate.h>
#import <libobjc.A.dylib/NRFrameworkDeviceDelegate.h>

@protocol OS_dispatch_queue;
@class NSMutableArray, NSMutableDictionary, NSObject, NSXPCConnection, NSUUID, NSString;

@interface NRPairedDeviceRegistry : NSObject <NRPairedDeviceRegistryXPCFrameworkDelegate, NSXPCConnectionDelegate, NRFrameworkDeviceDelegate> {

	char _xpcConnectionInvalidated;
	char _devicesHaveBeenInitialized;
	char _pairingClient;
	char _hasSomeEntitlements;
	NSMutableArray* _devicesBlocks;
	NSMutableDictionary* _mutableDeviceDictionary;
	NSObject*<OS_dispatch_queue> _pdrQueue;
	NSObject*<OS_dispatch_queue> _deviceQueue;
	NSObject*<OS_dispatch_queue> _reconnectQueue;
	NSMutableArray* _finishedPairingSemaphores;
	NSMutableArray* _grabDaemonStateBlocks;
	NSXPCConnection* _xpcConnection;
	NSUUID* _clientUUID;
	int _pairingCompatibilityVersion;
	int _maxPairingCompatibilityVersion;
	int _minPairingCompatibilityVersion;
	unsigned _lastUnpairReason;
	int _pairedStateNotifyToken;
	int _statusCodeNotifyToken;
	int _compatibilityStateNotifyToken;
	int _devicesUpdateCounterNotifyToken;
	int _nanoregistrydLaunchNotifyToken;
	unsigned long long _devicesUpdateCounter;

}

@property (nonatomic,readonly) unsigned status; 
@property (nonatomic,retain) NSMutableArray * devicesBlocks;                             //@synthesize devicesBlocks=_devicesBlocks - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * mutableDeviceDictionary;              //@synthesize mutableDeviceDictionary=_mutableDeviceDictionary - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> pdrQueue;                      //@synthesize pdrQueue=_pdrQueue - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> deviceQueue;                   //@synthesize deviceQueue=_deviceQueue - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> reconnectQueue;                //@synthesize reconnectQueue=_reconnectQueue - In the implementation block
@property (assign,nonatomic) char xpcConnectionInvalidated;                              //@synthesize xpcConnectionInvalidated=_xpcConnectionInvalidated - In the implementation block
@property (assign,nonatomic) char devicesHaveBeenInitialized;                            //@synthesize devicesHaveBeenInitialized=_devicesHaveBeenInitialized - In the implementation block
@property (assign,nonatomic) char pairingClient;                                         //@synthesize pairingClient=_pairingClient - In the implementation block
@property (nonatomic,retain) NSMutableArray * finishedPairingSemaphores;                 //@synthesize finishedPairingSemaphores=_finishedPairingSemaphores - In the implementation block
@property (nonatomic,retain) NSMutableArray * grabDaemonStateBlocks;                     //@synthesize grabDaemonStateBlocks=_grabDaemonStateBlocks - In the implementation block
@property (nonatomic,retain) NSXPCConnection * xpcConnection;                            //@synthesize xpcConnection=_xpcConnection - In the implementation block
@property (assign,nonatomic) char hasSomeEntitlements;                                   //@synthesize hasSomeEntitlements=_hasSomeEntitlements - In the implementation block
@property (nonatomic,retain) NSUUID * clientUUID;                                        //@synthesize clientUUID=_clientUUID - In the implementation block
@property (assign,nonatomic) int pairingCompatibilityVersion;                            //@synthesize pairingCompatibilityVersion=_pairingCompatibilityVersion - In the implementation block
@property (assign,nonatomic) int maxPairingCompatibilityVersion;                         //@synthesize maxPairingCompatibilityVersion=_maxPairingCompatibilityVersion - In the implementation block
@property (assign,nonatomic) int minPairingCompatibilityVersion;                         //@synthesize minPairingCompatibilityVersion=_minPairingCompatibilityVersion - In the implementation block
@property (assign,nonatomic) unsigned lastUnpairReason;                                  //@synthesize lastUnpairReason=_lastUnpairReason - In the implementation block
@property (assign,nonatomic) int pairedStateNotifyToken;                                 //@synthesize pairedStateNotifyToken=_pairedStateNotifyToken - In the implementation block
@property (assign,nonatomic) int statusCodeNotifyToken;                                  //@synthesize statusCodeNotifyToken=_statusCodeNotifyToken - In the implementation block
@property (assign,nonatomic) int compatibilityStateNotifyToken;                          //@synthesize compatibilityStateNotifyToken=_compatibilityStateNotifyToken - In the implementation block
@property (assign,nonatomic) int devicesUpdateCounterNotifyToken;                        //@synthesize devicesUpdateCounterNotifyToken=_devicesUpdateCounterNotifyToken - In the implementation block
@property (assign,nonatomic) int nanoregistrydLaunchNotifyToken;                         //@synthesize nanoregistrydLaunchNotifyToken=_nanoregistrydLaunchNotifyToken - In the implementation block
@property (assign,nonatomic) unsigned long long devicesUpdateCounter;                    //@synthesize devicesUpdateCounter=_devicesUpdateCounter - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedInstance;
-(unsigned)_status;
-(void)dealloc;
-(id)init;
-(unsigned)status;
-(void)waitForPairingStorePathPairingID:(/*^block*/id)arg1 ;
-(id)pairingStorePath;
-(id)pairingID;
-(id)getDevices;
-(id)getActivePairedDevice;
-(char)isPaired;
-(NSXPCConnection *)xpcConnection;
-(void)setXpcConnection:(NSXPCConnection *)arg1 ;
-(id)getAllDevices;
-(void)syncDevicesWithDevice:(id)arg1 ;
-(void)ensureDevicesUpToDate;
-(void)initNotifyTokens;
-(void)notifyStatus;
-(void)ensureDevicesHaveBeenInitializedOnce;
-(int)registerNotifyTokenWithName:(id)arg1 withQueue:(id)arg2 withBlock:(/*^block*/id)arg3 ;
-(int)registerNotifyTokenWithName:(id)arg1 withBlock:(/*^block*/id)arg2 ;
-(void)statusCodeChanged:(int)arg1 ;
-(void)_reinitializeFrameworkWithBlock:(/*^block*/id)arg1 ;
-(void)ensureDaemonHasStartedOnce;
-(unsigned long long)readNotifyToken:(int)arg1 ;
-(id)_findActivePairedDevice;
-(void)_pairingStorePathPairingID:(/*^block*/id)arg1 ;
-(void)pairingStorePathPairingID:(/*^block*/id)arg1 ;
-(char)_supportsWatch;
-(void)_xpcInvalidationHandler;
-(char)pairingClient;
-(NSObject*<OS_dispatch_queue>)reconnectQueue;
-(void)xpcDeviceDidPair:(id)arg1 deviceID:(id)arg2 ;
-(void)xpcDeviceIDDidFailToPair:(id)arg1 error:(id)arg2 ;
-(void)xpcDeviceDidUnpair:(id)arg1 deviceID:(id)arg2 ;
-(void)xpcCreateDevice:(id)arg1 deviceID:(id)arg2 ;
-(void)xpcDidBeginPairing:(id)arg1 deviceID:(id)arg2 ;
-(void)xpcDevice:(id)arg1 deviceID:(id)arg2 needsPasscode:(id)arg3 ;
-(void)xpcDeviceNeedsActivation:(id)arg1 deviceID:(id)arg2 ;
-(void)xpcHasNewOOBKey:(id)arg1 ;
-(void)xpcRemoteUnpairingDidBegin;
-(void)xpcCompatibilityStateDidChange:(unsigned short)arg1 withDevice:(id)arg2 andDeviceID:(id)arg3 ;
-(void)xpcDidReceiveBTPairingRequest:(id)arg1 deviceID:(id)arg2 ;
-(void)xpcLastUnpairReasonDidChange:(unsigned)arg1 ;
-(void)xpcSetValue:(id)arg1 forProperty:(id)arg2 deviceID:(id)arg3 withSequenceNumber:(unsigned long long)arg4 ;
-(void)xpcAssertInClient:(id)arg1 ;
-(void)_xpcFrameworkInitializationSuccessWithStatus:(unsigned)arg1 andDevices:(id)arg2 hasEntitlements:(char)arg3 andCompatibilityState:(unsigned short)arg4 andPairingCompatibilityVersion:(int)arg5 andMaxCompatibilityVersion:(int)arg6 andMinCompatibilityVersion:(int)arg7 andLastUnpairReason:(unsigned)arg8 andDevicesUpdateCounter:(unsigned long long)arg9 ;
-(void)_xpcInitializeConnection;
-(void)_destroyAllData;
-(void)sendDevicesUpdatedNotification;
-(void)_updateDevice:(id)arg1 updatedDevice:(id)arg2 ;
-(id)_findPairingDevice;
-(void)setActivePairedDevice:(id)arg1 operationHasBegun:(/*^block*/id)arg2 ;
-(void)getDevicesWithBlock:(/*^block*/id)arg1 ;
-(void)companionOOBDiscoverAndPairWithName:(id)arg1 withOutOfBandPairingKey:(id)arg2 operationHasBegun:(/*^block*/id)arg3 ;
-(void)companionPasscodePairWithDevice:(id)arg1 operationHasBegun:(/*^block*/id)arg2 ;
-(void)gizmoOOBAdvertiseAndPairWithName:(id)arg1 operationHasBegun:(/*^block*/id)arg2 ;
-(void)gizmoPasscodeAdvertiseAndPairWithName:(id)arg1 operationHasBegun:(/*^block*/id)arg2 ;
-(void)notifyActivationCompleted:(id)arg1 withSuccess:(char)arg2 ;
-(void)notifyPasscode:(id)arg1 forDevice:(id)arg2 ;
-(void)notifyPairingShouldContinue;
-(void)unpairWithDevice:(id)arg1 shouldObliterate:(char)arg2 operationHasBegun:(/*^block*/id)arg3 ;
-(void)enterCompatibilityState:(unsigned short)arg1 forDevice:(id)arg2 ;
-(unsigned short)compatibilityState;
-(void)abortPairing;
-(void)abortPairingWithReason:(id)arg1 ;
-(void)suspendPairingClientCrashMonitoring;
-(void)resumePairingClientCrashMonitoring;
-(int)pairingCompatibilityVersion;
-(void)userIsCheckingForUpdate;
-(int)minPairingCompatibilityVersion;
-(unsigned)lastUnpairReason;
-(void)retriggerUnpairInfoDialog;
-(id)_recoveryDescription;
-(void)_triggerRecovery;
-(void)_setObliterationEnabled:(char)arg1 ;
-(void)_addRemoveRecoveryStepDisableDaemons:(char)arg1 ;
-(void)_addRemoveRecoveryStepBackup:(char)arg1 withPairingDeviceID:(id)arg2 ;
-(void)_addRemoveRecoveryStepDeleteAccounts:(char)arg1 ;
-(void)_addRemoveRecoveryStepIDSUnpairStart:(char)arg1 ;
-(void)_addRemoveRecoveryStepRemoteUnpair:(char)arg1 withAdvertisedName:(id)arg2 andPairedDeviceID:(id)arg3 ;
-(void)_addRemoveRecoveryStepDeletePairingStore:(char)arg1 withPairingDeviceID:(id)arg2 ;
-(void)_addRemoveRecoveryStepUnpairBluetooth:(char)arg1 withPairingDeviceID:(id)arg2 ;
-(void)_addRemoveRecoveryStepIDSUnpair:(char)arg1 withPairingDeviceID:(id)arg2 ;
-(void)_addRemoveRecoveryStepStockholmReset:(char)arg1 ;
-(void)_addRemoveRecoveryStepICloudDeletePaymentCards:(char)arg1 ;
-(void)_addRemoveRecoveryStepResetNVRAM:(char)arg1 ;
-(void)_addRemoveRecoveryStepObliterate:(char)arg1 withStatePath:(id)arg2 ;
-(void)_addRemoveRecoveryStepIDSFinalize:(char)arg1 ;
-(char)supportsPairedDevice;
-(id)_findActiveDevice;
-(void)_submitAlbertPairingReport;
-(NSMutableArray *)devicesBlocks;
-(void)setDevicesBlocks:(NSMutableArray *)arg1 ;
-(NSMutableDictionary *)mutableDeviceDictionary;
-(void)setMutableDeviceDictionary:(NSMutableDictionary *)arg1 ;
-(NSObject*<OS_dispatch_queue>)pdrQueue;
-(void)setPdrQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSObject*<OS_dispatch_queue>)deviceQueue;
-(void)setDeviceQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)setReconnectQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(char)xpcConnectionInvalidated;
-(void)setXpcConnectionInvalidated:(char)arg1 ;
-(char)devicesHaveBeenInitialized;
-(void)setDevicesHaveBeenInitialized:(char)arg1 ;
-(void)setPairingClient:(char)arg1 ;
-(NSMutableArray *)finishedPairingSemaphores;
-(void)setFinishedPairingSemaphores:(NSMutableArray *)arg1 ;
-(NSMutableArray *)grabDaemonStateBlocks;
-(void)setGrabDaemonStateBlocks:(NSMutableArray *)arg1 ;
-(char)hasSomeEntitlements;
-(void)setHasSomeEntitlements:(char)arg1 ;
-(NSUUID *)clientUUID;
-(void)setClientUUID:(NSUUID *)arg1 ;
-(void)setPairingCompatibilityVersion:(int)arg1 ;
-(void)setMaxPairingCompatibilityVersion:(int)arg1 ;
-(void)setMinPairingCompatibilityVersion:(int)arg1 ;
-(void)setLastUnpairReason:(unsigned)arg1 ;
-(int)pairedStateNotifyToken;
-(void)setPairedStateNotifyToken:(int)arg1 ;
-(int)statusCodeNotifyToken;
-(void)setStatusCodeNotifyToken:(int)arg1 ;
-(int)compatibilityStateNotifyToken;
-(void)setCompatibilityStateNotifyToken:(int)arg1 ;
-(int)devicesUpdateCounterNotifyToken;
-(void)setDevicesUpdateCounterNotifyToken:(int)arg1 ;
-(int)nanoregistrydLaunchNotifyToken;
-(void)setNanoregistrydLaunchNotifyToken:(int)arg1 ;
-(unsigned long long)devicesUpdateCounter;
-(void)setDevicesUpdateCounter:(unsigned long long)arg1 ;
-(int)maxPairingCompatibilityVersion;
-(unsigned)majorVersion;
-(unsigned)minorVersion;
@end

