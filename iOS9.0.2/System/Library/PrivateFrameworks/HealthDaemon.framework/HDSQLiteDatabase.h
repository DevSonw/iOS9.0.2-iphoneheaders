/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:32:59 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <HealthDaemon/HealthDaemon-Structs.h>
@class NSMutableDictionary, NSURL;

@interface HDSQLiteDatabase : NSObject {

	sqlite3Ref _db;
	char _isInTransaction;
	int _transactionType;
	CFDictionaryRef _statementCache;
	NSMutableDictionary* _attachedDatabaseURLsByName;
	unordered_set<sqlite3_stmt *, std::__1::hash<sqlite3_stmt *>, std::__1::equal_to<sqlite3_stmt *>, std::__1::allocator<sqlite3_stmt *> >* _activeStatements;
	char _checkpointRequired;
	NSURL* _fileURL;

}

@property (nonatomic,readonly) NSURL * fileURL;                    //@synthesize fileURL=_fileURL - In the implementation block
@property (assign,nonatomic) char checkpointRequired;              //@synthesize checkpointRequired=_checkpointRequired - In the implementation block
+(id)virtualFilesystemModule;
+(char)_stepStatement:(sqlite3_stmtRef)arg1 hasRow:(char*)arg2 resultCode:(int*)arg3 error:(id*)arg4 ;
+(char)statementDidFinishAfterStepping:(sqlite3_stmtRef)arg1 resultCode:(int*)arg2 error:(id*)arg3 ;
+(char)statementHasRowAfterStepping:(sqlite3_stmtRef)arg1 resultCode:(int*)arg2 error:(id*)arg3 ;
+(char)statementHasRowAfterStepping:(sqlite3_stmtRef)arg1 error:(id*)arg2 ;
+(char)enumerateStatement:(sqlite3_stmtRef)arg1 error:(id*)arg2 block:(/*^block*/id)arg3 ;
+(char)statementDidFinishAfterStepping:(sqlite3_stmtRef)arg1 error:(id*)arg2 ;
+(char)deleteDatabaseAtPath:(id)arg1 reason:(id)arg2 ;
-(void)dealloc;
-(NSURL *)fileURL;
-(int)open;
-(id)initWithDatabaseURL:(id)arg1 ;
-(char)enumerateResultsForSQL:(id)arg1 error:(id*)arg2 block:(/*^block*/id)arg3 ;
-(char)executeSQL:(id)arg1 error:(id*)arg2 ;
-(void)_assertNoActiveStatements;
-(char)executeSQL:(id)arg1 error:(id*)arg2 retryIfBusy:(char)arg3 ;
-(char)prepareStatementForSQL:(id)arg1 cache:(char)arg2 error:(id*)arg3 usingBlock:(/*^block*/id)arg4 ;
-(id)getLastErrorWithResultCode:(int)arg1 ;
-(sqlite3_stmtRef)_statementForSQL:(id)arg1 cache:(char)arg2 error:(id*)arg3 ;
-(void)resetStatement:(sqlite3_stmtRef)arg1 finalize:(char)arg2 ;
-(char)_setPragma:(id)arg1 integerValue:(int)arg2 withDatabaseName:(id)arg3 error:(id*)arg4 ;
-(char)_integerValueForPragma:(id)arg1 databaseName:(id)arg2 value:(long long*)arg3 error:(id*)arg4 ;
-(char)alterTable:(id)arg1 removeColumns:(id)arg2 renameColumns:(id)arg3 error:(id*)arg4 ;
-(char)performTransactionWithType:(int)arg1 error:(id*)arg2 usingBlock:(/*^block*/id)arg3 ;
-(id)_schemaForTableWithName:(id)arg1 database:(id)arg2 error:(id*)arg3 ;
-(char)isDatabaseWithNameAttached:(id)arg1 ;
-(id)_schemaForDatabaseWithName:(id)arg1 error:(id*)arg2 ;
-(void)accessDatabaseUsingBlock:(/*^block*/id)arg1 ;
-(char)executeSQL:(id)arg1 argument:(id)arg2 error:(id*)arg3 ;
-(sqlite3_stmtRef)preparedStatementForSQL:(id)arg1 cache:(char)arg2 error:(id*)arg3 ;
-(char)setUserVersion:(int)arg1 withDatabaseName:(id)arg2 error:(id*)arg3 ;
-(int)userVersionWithDatabaseName:(id)arg1 error:(id*)arg2 ;
-(id)lastInsertRowID;
-(char)validateForeignKeysForTable:(id)arg1 databaseName:(id)arg2 error:(id*)arg3 ;
-(char)addColumnInTable:(id)arg1 columnSQL:(id)arg2 error:(id*)arg3 ;
-(char)removeColumnInTable:(id)arg1 name:(id)arg2 error:(id*)arg3 ;
-(char)renameColumnInTable:(id)arg1 oldName:(id)arg2 newName:(id)arg3 error:(id*)arg4 ;
-(char)dropTable:(id)arg1 error:(id*)arg2 ;
-(char)renameTable:(id)arg1 newName:(id)arg2 error:(id*)arg3 ;
-(char)insertColumns:(id)arg1 fromTableNamed:(id)arg2 toTableNamed:(id)arg3 error:(id*)arg4 ;
-(char)table:(id)arg1 hasColumnWithName:(id)arg2 error:(id*)arg3 ;
-(char)foreignKeyExistsFromTable:(id)arg1 column:(id)arg2 toTable:(id)arg3 column:(id)arg4 error:(id*)arg5 ;
-(id)typeOfColumn:(id)arg1 inTable:(id)arg2 error:(id*)arg3 ;
-(char)columnIsNullable:(id)arg1 inTable:(id)arg2 error:(id*)arg3 ;
-(char)enableIncrementalAutovacuumWithError:(id*)arg1 ;
-(char)incrementalVacuumDatabaseIfNeeded:(id)arg1 error:(id*)arg2 ;
-(char)attachDatabaseWithName:(id)arg1 fileURL:(id)arg2 error:(id*)arg3 ;
-(char)detachDatabaseWithName:(id)arg1 error:(id*)arg2 ;
-(id)_schemaForIndexWithName:(id)arg1 database:(id)arg2 error:(id*)arg3 ;
-(id)dumpSchemaWithError:(id*)arg1 ;
-(char)checkpointRequired;
-(void)setCheckpointRequired:(char)arg1 ;
@end

