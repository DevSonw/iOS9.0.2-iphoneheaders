/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:32:31 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/PrivateFrameworks/CryptoTokenKit.framework/CryptoTokenKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <CryptoTokenKit/CryptoTokenKit-Structs.h>
@class TKSmartCardSlot, NSObject, NSNumber;

@interface TKSmartCard : NSObject {

	TKSmartCardSlot* _slot;
	NSObject*<OS_dispatch_queue> _beginSessionQueue;
	char _sensitive;
	id _session;
	int _sessionCounter;
	char _someoneWantsSession;
	int _sessionEndPolicy;
	NSNumber* _reservedProtocols;
	char _useExtendedLength;
	char _useCommandChaining;
	unsigned char _cla;
	char _valid;
	unsigned _allowedProtocols;
	unsigned _currentProtocol;
	id _context;

}

@property (assign,nonatomic) int sessionEndPolicy; 
@property (assign) char useCommandChaining; 
@property (assign) unsigned char cla; 
@property (assign) char useExtendedLength; 
@property (nonatomic,readonly) TKSmartCardSlot * slot;              //@synthesize slot=_slot - In the implementation block
@property (assign) char valid;                                      //@synthesize valid=_valid - In the implementation block
@property (assign) unsigned allowedProtocols;                       //@synthesize allowedProtocols=_allowedProtocols - In the implementation block
@property (assign) unsigned currentProtocol;                        //@synthesize currentProtocol=_currentProtocol - In the implementation block
@property (assign) char sensitive; 
@property (retain) id context;                                      //@synthesize context=_context - In the implementation block
-(char)revalidate;
-(TKSmartCardSlot *)slot;
-(void)dealloc;
-(id)context;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)setContext:(id)arg1 ;
-(char)valid;
-(void)endSession;
-(void)setValid:(char)arg1 ;
-(void)sessionRequested;
-(id)initWithSlot:(id)arg1 ;
-(void)setCurrentProtocol:(unsigned)arg1 ;
-(void)setSessionEndPolicy:(int)arg1 ;
-(id)remoteSessionWithErrorHandler:(/*^block*/id)arg1 ;
-(void)releaseSessionWithReply:(/*^block*/id)arg1 ;
-(void)setUseExtendedLength:(char)arg1 ;
-(void)setUseCommandChaining:(char)arg1 ;
-(void)endSessionWithReply:(/*^block*/id)arg1 ;
-(void)unreserve;
-(void)setSensitive:(char)arg1 ;
-(char)sensitive;
-(void)beginSessionWithReply:(/*^block*/id)arg1 ;
-(void)transmitRequest:(id)arg1 reply:(/*^block*/id)arg2 ;
-(id)userInteractionForSecurePINVerificationWithPINFormat:(id)arg1 APDU:(id)arg2 PINByteOffset:(int)arg3 ;
-(id)userInteractionForSecurePINChangeWithPINFormat:(id)arg1 APDU:(id)arg2 currentPINByteOffset:(int)arg3 newPINByteOffset:(int)arg4 ;
-(unsigned)allowedProtocols;
-(void)setAllowedProtocols:(unsigned)arg1 ;
-(unsigned)currentProtocol;
-(char)useCommandChaining;
-(void)reserveExclusive:(char)arg1 reply:(/*^block*/id)arg2 ;
-(int)sessionEndPolicy;
-(char)decodeResponse:(id)arg1 sw:(unsigned short*)arg2 appendTo:(id)arg3 error:(id*)arg4 ;
-(void)handleApduResponse:(id)arg1 body:(id)arg2 le:(unsigned)arg3 isCase4:(char)arg4 error:(id)arg5 reply:(/*^block*/id)arg6 ;
-(void)encodeLength:(unsigned)arg1 into:(id)arg2 sized:(int)arg3 ;
-(id)buildIns:(unsigned char)arg1 p1:(unsigned char)arg2 p2:(unsigned char)arg3 data:(id)arg4 range:(NSRange)arg5 le:(id)arg6 protocol:(unsigned)arg7 chained:(char)arg8 extended:(char*)arg9 realLe:(unsigned*)arg10 ;
-(void)transmitChunkedIns:(unsigned char)arg1 p1:(unsigned char)arg2 p2:(unsigned char)arg3 data:(id)arg4 fromOffset:(unsigned)arg5 realLe:(unsigned)arg6 chained:(char)arg7 isCase4:(char)arg8 reply:(/*^block*/id)arg9 ;
-(char)useExtendedLength;
-(unsigned char)cla;
-(void)setCla:(unsigned char)arg1 ;
-(void)sendIns:(unsigned char)arg1 p1:(unsigned char)arg2 p2:(unsigned char)arg3 data:(id)arg4 le:(id)arg5 reply:(/*^block*/id)arg6 ;
-(char)inSessionWithError:(id*)arg1 do:(/*^block*/id)arg2 ;
-(id)sendIns:(unsigned char)arg1 p1:(unsigned char)arg2 p2:(unsigned char)arg3 data:(id)arg4 le:(id)arg5 sw:(unsigned short*)arg6 error:(id*)arg7 ;
@end

