/*
* This header is generated by classdump-dyld 0.7
* on Friday, November 6, 2015 at 2:34:32 PM Japan Standard Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomEvaluator.framework/SymptomEvaluator
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <SymptomEvaluator/SymptomEvaluator-Structs.h>
@class NSString, AnalyticsWorkspace, NSObject, ImpoExpoService, NSMutableSet, NSMutableArray, NSArray, NSCalendar, SystemSettingsRelay, NSDate;

@interface NetworkAnalyticsModel : NSObject {

	NSString* journalName;
	AnalyticsWorkspace* workspace;
	NSObject*<OS_dispatch_queue> queue;
	ImpoExpoService* ieService;
	unsigned slotSize;
	unsigned numberOfSlotsInDay;
	unsigned periodPerDay;
	unsigned minimumEventsToConsiderPattern;
	int firstEventTimeStampWifi;
	int firstEventTimeStampCell;
	int lastEventTimeStampWifi;
	int lastEventTimeStampCell;
	int latestPredictionTrainingTimeCell;
	int latestPredictionTrainingTimeWifi;
	int wifiPredictionLogic;
	int cellPredictionLogic;
	int weightStrategy;
	NSMutableSet* internalNetworkStateSetWifi;
	NSMutableSet* internalNetworkStateSetCell;
	NSMutableArray* networkStateTableWifi;
	NSMutableArray* networkStateTableCell;
	NSMutableArray* networkStateTableCentroids;
	unsigned numberOfDaysWithWifiEvents;
	unsigned numberOfDaysWithCellEvents;
	NSArray* defaultArrayOfDaysGroupWifi;
	NSArray* defaultArrayOfDaysGroupCell;
	NSArray* currentArrayOfDaysGroupWifi;
	NSArray* currentArrayOfDaysGroupCell;
	NSMutableArray* totalEnergyList;
	int timezoneOffsetFromUtcNoDaylight;
	int homeTimezoneOffsetFromUtcNoDaylight;
	BOOL homeTimezoneOffsetKnownCoreRoutine;
	double wifiPredictionError;
	double cellPredictionError;
	NSArray* defaultPredictedEventsWifi;
	NSArray* defaultPredictedEventsCell;
	NSArray* currentPredictedEventsWifi;
	NSArray* currentPredictedEventsCell;
	NSString* currentlyConnectedWifiSsid;
	NSArray* disconnectionPatternsWifi;
	NSString* simulatedJournalPath;
	unsigned recallCounterWifi;
	unsigned recallCounterCell;
	unsigned pullupCounterWifi;
	unsigned pullupCounterCell;
	id _cellEpochObserver;
	id _wifiEpochObserver;
	id _timezoneChangedObserver;
	NSCalendar* _calendar;
	SystemSettingsRelay* systemSettingsRelay;
	char _isHelper;
	NSDate* _lastModelRunTime;

}

@property (assign,nonatomic) char isHelper;                //@synthesize isHelper=_isHelper - In the implementation block
@property (retain) NSDate * lastModelRunTime;              //@synthesize lastModelRunTime=_lastModelRunTime - In the implementation block
+(id)modelGeneratedAt;
+(id)fetchPredictionsForInterfaceType:(int)arg1 isAny:(char)arg2 isBuiltin:(char)arg3 scopedToLOI:(int)arg4 hasCustomSignature:(id)arg5 error:(id*)arg6 ;
+(unsigned)modelResolution;
+(double)fetchPredictionErrorForInterfaceType:(int)arg1 isAny:(char)arg2 isBuiltin:(char)arg3 scopedToLOI:(int)arg4 hasCustomSignature:(id)arg5 ;
+(id)getDaysWithSimilarPatternForInterfaceType:(int)arg1 ;
+(double)fetchTrainingProgressForInterfaceType:(int)arg1 isAny:(char)arg2 isBuiltin:(char)arg3 scopedToLOI:(int)arg4 hasCustomSignature:(id)arg5 ;
-(void)dealloc;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(char)isHelper;
-(void)setIsHelper:(char)arg1 ;
-(id)initWithJournalName:(id)arg1 workspace:(id)arg2 queue:(id)arg3 ;
-(void)trainModel;
-(void)processProxyTrain;
-(void)_fetchHomeTimezoneOffsetFromJournal;
-(void)_loadLatestPredictionFromJournalWithInterfaceType:(int)arg1 ;
-(void)_handleNetworkNotificationFrom:(int)arg1 notification:(id)arg2 ;
-(void)_handleTimezoneChanged;
-(int)_getCurrentLocationTimezoneOffsetWithoutDST;
-(int)_getWifiStateBasedOnLQM:(char)arg1 faultyValue:(unsigned char)arg2 ;
-(int)_getCellStateBasedOnLQM:(char)arg1 faultyValue:(unsigned char)arg2 ;
-(int)_getDominantStateInSlotUsingPredictionLogic:(int)arg1 secondsInGood:(int)arg2 secondsInPoor:(int)arg3 secondsInBad:(int)arg4 secondsInUnknown:(int)arg5 secondsInOff:(int)arg6 ;
-(id)_formattedDateForIpsFilename:(id)arg1 ;
-(void)_removePrimarykeyAndLocationInJournalData:(id)arg1 ;
-(id)_getListOfAllJournalNames;
-(void)_removePrimarykeyAndLocationFromJournalName:(id)arg1 withData:(id)arg2 ;
-(id)_createCompletedIpsFileName:(id)arg1 ;
-(id)_createDataForCrashReporterIpsHeader:(id)arg1 ;
-(SCD_Struct_Ne7)_parseTimeIntoWeekdayAndSlotId:(long long)arg1 withReferenceDate:(id)arg2 ;
-(BOOL)_insertInternalNetworkStateRecordForNetworkType:(int)arg1 networkId:(id)arg2 networkState:(int)arg3 age:(int)arg4 dayOfWeek:(int)arg5 slotId:(int)arg6 numberOfSlots:(int)arg7 stateDuration:(int)arg8 ;
-(void)_printStateEventTableForNetworkType:(int)arg1 ;
-(void)_sanitizeInternalStateEventNetworkType:(int)arg1 ;
-(NSDate *)lastModelRunTime;
-(void)setLastModelRunTime:(NSDate *)arg1 ;
-(BOOL)_isValidTimezoneToReturnPredictions;
-(id)_getComplementaryPredictionNameForInterface:(int)arg1 ;
-(id)_getPredictionJournalNamePrefixForInterface:(int)arg1 slotSize:(unsigned)arg2 ;
-(id)_createHeaderDataForSavedPredictionsName:(id)arg1 hasComplementaryPrediction:(BOOL)arg2 interfaceType:(int)arg3 ;
-(id)_getSavedPredictionHeaderNameForInterface:(int)arg1 ;
-(id)_loadSavedPredictionBasedOnHeaderData:(id)arg1 interface:(int)arg2 ;
-(void)_shuffleArray:(id)arg1 ;
-(double)_clusterUsingKMeansOn:(id)arg1 into:(int)arg2 iterations:(int)arg3 saveCentroidsTo:(id)arg4 ;
-(int)_elbow;
-(id)_extractImpairmentEventsFromNetworkStateTable:(id)arg1 setOfDays:(id)arg2 ;
-(void)_clusterImpairmentEventsUsingKMeansOn:(id)arg1 saveCentroidsTo:(id)arg2 ;
-(unsigned)_getTotalWeightForCompletedHistory;
-(int)_predictNetworkQualityBasedOnAverageLQM:(double)arg1 ;
-(unsigned)_getWeightForNetworkStateRecord:(id)arg1 ;
-(SCD_Struct_Ne8)_calculateStatisticsFromNetworkStateTable:(id)arg1 usingPredicate:(id)arg2 ;
-(void)_actUponSystemSettingsAirplaneChanged:(BOOL)arg1 wifiChanged:(BOOL)arg2 cellDataChanged:(BOOL)arg3 ;
-(id)_clusterEventsUsingKMeansForSetOfDays:(id)arg1 interfaceType:(int)arg2 ;
-(id)_clusterEventsInWeekUsingKMeansForInterfaceType:(int)arg1 ;
-(void)_generatePredictionForDays:(id)arg1 fromClusteredEvents:(id)arg2 clusterCentroids:(id)arg3 interfaceType:(int)arg4 basedOnWeekClusters:(int)arg5 savePredictionsTo:(id)arg6 ;
-(id)_learnDisconnectionPatternForSetOfDays:(id)arg1 impairmentEvents:(id)arg2 ;
-(BOOL)_savePredictionToJournalForInterface:(int)arg1 ;
-(void)_purgeJournalWithPrefix:(id)arg1 olderThan:(unsigned)arg2 ;
-(void)_purgeSavedPredictionsOlderThan:(unsigned)arg1 ;
-(BOOL)_shouldCreateIpsFile;
-(id)_readJournalEntriesAndSaveToIps:(BOOL)arg1 ;
-(void)_processJournalData:(id)arg1 startFrom:(long long)arg2 endAt:(long long)arg3 ;
-(double)_evaluatePredictionErrorForInterfaceType:(int)arg1 ;
-(void)_trainModelForInterfaceType:(int)arg1 ;
-(BOOL)_isValidTimezoneToTrain;
-(void)_trainModelAt:(id)arg1 ;
-(void)postAWDPredictionMetricsForInterface:(int)arg1 previousTime:(int)arg2 ;
-(id)_getDaysWithSimilarPatternForInterfaceType:(int)arg1 ;
-(double)_fetchTrainingProgressForInterfaceType:(int)arg1 ;
-(unsigned)numberOfGroupOfSimilarDaysForInterface:(int)arg1 ;
-(id)_fetchPredictionsForInterfaceType:(int)arg1 isAny:(char)arg2 isBuiltin:(char)arg3 scopedToLOI:(int)arg4 hasCustomSignature:(id)arg5 error:(id*)arg6 ;
-(double)_fetchTrainingProgressForInterfaceType:(int)arg1 isAny:(char)arg2 isBuiltin:(char)arg3 scopedToLOI:(int)arg4 hasCustomSignature:(id)arg5 ;
-(unsigned)_modelResolution;
-(double)_fetchPredictionErrorForInterfaceType:(int)arg1 isAny:(char)arg2 isBuiltin:(char)arg3 scopedToLOI:(int)arg4 hasCustomSignature:(id)arg5 ;
-(int)_getNetworkState:(int)arg1 basedOnLQM:(char)arg2 faultyValue:(unsigned char)arg3 ;
-(void)_updateHomeTimezoneOffsetIfNeeded;
@end

